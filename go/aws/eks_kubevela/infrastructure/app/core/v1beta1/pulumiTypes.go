// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Application is the Schema for the applications API
type ApplicationType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ApplicationSpec is the spec of Application
	Spec *ApplicationSpec `pulumi:"spec"`
	// AppStatus defines the observed state of Application
	Status *ApplicationStatus `pulumi:"status"`
}

type ApplicationMetadata struct {
}

// ApplicationSpec is the spec of Application
type ApplicationSpec struct {
	Components []ApplicationSpecComponents `pulumi:"components"`
	// Policies defines the global policies for all components in the app, e.g. security, metrics, gitops, multi-cluster placement rules, etc. Policies are applied after components are rendered and before workflow steps are executed.
	Policies []ApplicationSpecPolicies `pulumi:"policies"`
	// Workflow defines how to customize the control logic. If workflow is specified, Vela won't apply any resource, but provide rendered output in AppRevision. Workflow steps are executed in array order, and each step: - will have a context in annotation. - should mark "finish" phase in status.conditions.
	Workflow *ApplicationSpecWorkflow `pulumi:"workflow"`
}

// ApplicationSpecInput is an input type that accepts ApplicationSpecArgs and ApplicationSpecOutput values.
// You can construct a concrete instance of `ApplicationSpecInput` via:
//
//	ApplicationSpecArgs{...}
type ApplicationSpecInput interface {
	pulumi.Input

	ToApplicationSpecOutput() ApplicationSpecOutput
	ToApplicationSpecOutputWithContext(context.Context) ApplicationSpecOutput
}

// ApplicationSpec is the spec of Application
type ApplicationSpecArgs struct {
	Components ApplicationSpecComponentsArrayInput `pulumi:"components"`
	// Policies defines the global policies for all components in the app, e.g. security, metrics, gitops, multi-cluster placement rules, etc. Policies are applied after components are rendered and before workflow steps are executed.
	Policies ApplicationSpecPoliciesArrayInput `pulumi:"policies"`
	// Workflow defines how to customize the control logic. If workflow is specified, Vela won't apply any resource, but provide rendered output in AppRevision. Workflow steps are executed in array order, and each step: - will have a context in annotation. - should mark "finish" phase in status.conditions.
	Workflow ApplicationSpecWorkflowPtrInput `pulumi:"workflow"`
}

func (ApplicationSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpec)(nil)).Elem()
}

func (i ApplicationSpecArgs) ToApplicationSpecOutput() ApplicationSpecOutput {
	return i.ToApplicationSpecOutputWithContext(context.Background())
}

func (i ApplicationSpecArgs) ToApplicationSpecOutputWithContext(ctx context.Context) ApplicationSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecOutput)
}

func (i ApplicationSpecArgs) ToApplicationSpecPtrOutput() ApplicationSpecPtrOutput {
	return i.ToApplicationSpecPtrOutputWithContext(context.Background())
}

func (i ApplicationSpecArgs) ToApplicationSpecPtrOutputWithContext(ctx context.Context) ApplicationSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecOutput).ToApplicationSpecPtrOutputWithContext(ctx)
}

// ApplicationSpecPtrInput is an input type that accepts ApplicationSpecArgs, ApplicationSpecPtr and ApplicationSpecPtrOutput values.
// You can construct a concrete instance of `ApplicationSpecPtrInput` via:
//
//	        ApplicationSpecArgs{...}
//
//	or:
//
//	        nil
type ApplicationSpecPtrInput interface {
	pulumi.Input

	ToApplicationSpecPtrOutput() ApplicationSpecPtrOutput
	ToApplicationSpecPtrOutputWithContext(context.Context) ApplicationSpecPtrOutput
}

type applicationSpecPtrType ApplicationSpecArgs

func ApplicationSpecPtr(v *ApplicationSpecArgs) ApplicationSpecPtrInput {
	return (*applicationSpecPtrType)(v)
}

func (*applicationSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpec)(nil)).Elem()
}

func (i *applicationSpecPtrType) ToApplicationSpecPtrOutput() ApplicationSpecPtrOutput {
	return i.ToApplicationSpecPtrOutputWithContext(context.Background())
}

func (i *applicationSpecPtrType) ToApplicationSpecPtrOutputWithContext(ctx context.Context) ApplicationSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecPtrOutput)
}

// ApplicationSpec is the spec of Application
type ApplicationSpecOutput struct{ *pulumi.OutputState }

func (ApplicationSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpec)(nil)).Elem()
}

func (o ApplicationSpecOutput) ToApplicationSpecOutput() ApplicationSpecOutput {
	return o
}

func (o ApplicationSpecOutput) ToApplicationSpecOutputWithContext(ctx context.Context) ApplicationSpecOutput {
	return o
}

func (o ApplicationSpecOutput) ToApplicationSpecPtrOutput() ApplicationSpecPtrOutput {
	return o.ToApplicationSpecPtrOutputWithContext(context.Background())
}

func (o ApplicationSpecOutput) ToApplicationSpecPtrOutputWithContext(ctx context.Context) ApplicationSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationSpec) *ApplicationSpec {
		return &v
	}).(ApplicationSpecPtrOutput)
}

func (o ApplicationSpecOutput) Components() ApplicationSpecComponentsArrayOutput {
	return o.ApplyT(func(v ApplicationSpec) []ApplicationSpecComponents { return v.Components }).(ApplicationSpecComponentsArrayOutput)
}

// Policies defines the global policies for all components in the app, e.g. security, metrics, gitops, multi-cluster placement rules, etc. Policies are applied after components are rendered and before workflow steps are executed.
func (o ApplicationSpecOutput) Policies() ApplicationSpecPoliciesArrayOutput {
	return o.ApplyT(func(v ApplicationSpec) []ApplicationSpecPolicies { return v.Policies }).(ApplicationSpecPoliciesArrayOutput)
}

// Workflow defines how to customize the control logic. If workflow is specified, Vela won't apply any resource, but provide rendered output in AppRevision. Workflow steps are executed in array order, and each step: - will have a context in annotation. - should mark "finish" phase in status.conditions.
func (o ApplicationSpecOutput) Workflow() ApplicationSpecWorkflowPtrOutput {
	return o.ApplyT(func(v ApplicationSpec) *ApplicationSpecWorkflow { return v.Workflow }).(ApplicationSpecWorkflowPtrOutput)
}

type ApplicationSpecPtrOutput struct{ *pulumi.OutputState }

func (ApplicationSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpec)(nil)).Elem()
}

func (o ApplicationSpecPtrOutput) ToApplicationSpecPtrOutput() ApplicationSpecPtrOutput {
	return o
}

func (o ApplicationSpecPtrOutput) ToApplicationSpecPtrOutputWithContext(ctx context.Context) ApplicationSpecPtrOutput {
	return o
}

func (o ApplicationSpecPtrOutput) Elem() ApplicationSpecOutput {
	return o.ApplyT(func(v *ApplicationSpec) ApplicationSpec {
		if v != nil {
			return *v
		}
		var ret ApplicationSpec
		return ret
	}).(ApplicationSpecOutput)
}

func (o ApplicationSpecPtrOutput) Components() ApplicationSpecComponentsArrayOutput {
	return o.ApplyT(func(v *ApplicationSpec) []ApplicationSpecComponents {
		if v == nil {
			return nil
		}
		return v.Components
	}).(ApplicationSpecComponentsArrayOutput)
}

// Policies defines the global policies for all components in the app, e.g. security, metrics, gitops, multi-cluster placement rules, etc. Policies are applied after components are rendered and before workflow steps are executed.
func (o ApplicationSpecPtrOutput) Policies() ApplicationSpecPoliciesArrayOutput {
	return o.ApplyT(func(v *ApplicationSpec) []ApplicationSpecPolicies {
		if v == nil {
			return nil
		}
		return v.Policies
	}).(ApplicationSpecPoliciesArrayOutput)
}

// Workflow defines how to customize the control logic. If workflow is specified, Vela won't apply any resource, but provide rendered output in AppRevision. Workflow steps are executed in array order, and each step: - will have a context in annotation. - should mark "finish" phase in status.conditions.
func (o ApplicationSpecPtrOutput) Workflow() ApplicationSpecWorkflowPtrOutput {
	return o.ApplyT(func(v *ApplicationSpec) *ApplicationSpecWorkflow {
		if v == nil {
			return nil
		}
		return v.Workflow
	}).(ApplicationSpecWorkflowPtrOutput)
}

// ApplicationComponent describe the component of application
type ApplicationSpecComponents struct {
	DependsOn []string `pulumi:"dependsOn"`
	// ExternalRevision specified the component revisionName
	ExternalRevision *string `pulumi:"externalRevision"`
	// StepInputs defines variable input of WorkflowStep
	Inputs []ApplicationSpecComponentsInputs `pulumi:"inputs"`
	Name   string                            `pulumi:"name"`
	// StepOutputs defines output variable of WorkflowStep
	Outputs    []ApplicationSpecComponentsOutputs `pulumi:"outputs"`
	Properties map[string]interface{}             `pulumi:"properties"`
	// scopes in ApplicationComponent defines the component-level scopes the format is <scope-type:scope-instance-name> pairs, the key represents type of `ScopeDefinition` while the value represent the name of scope instance.
	Scopes map[string]interface{} `pulumi:"scopes"`
	// Traits define the trait of one component, the type must be array to keep the order.
	Traits []ApplicationSpecComponentsTraits `pulumi:"traits"`
	Type   string                            `pulumi:"type"`
}

// ApplicationSpecComponentsInput is an input type that accepts ApplicationSpecComponentsArgs and ApplicationSpecComponentsOutput values.
// You can construct a concrete instance of `ApplicationSpecComponentsInput` via:
//
//	ApplicationSpecComponentsArgs{...}
type ApplicationSpecComponentsInput interface {
	pulumi.Input

	ToApplicationSpecComponentsOutput() ApplicationSpecComponentsOutput
	ToApplicationSpecComponentsOutputWithContext(context.Context) ApplicationSpecComponentsOutput
}

// ApplicationComponent describe the component of application
type ApplicationSpecComponentsArgs struct {
	DependsOn pulumi.StringArrayInput `pulumi:"dependsOn"`
	// ExternalRevision specified the component revisionName
	ExternalRevision pulumi.StringPtrInput `pulumi:"externalRevision"`
	// StepInputs defines variable input of WorkflowStep
	Inputs ApplicationSpecComponentsInputsArrayInput `pulumi:"inputs"`
	Name   pulumi.StringInput                        `pulumi:"name"`
	// StepOutputs defines output variable of WorkflowStep
	Outputs    ApplicationSpecComponentsOutputsArrayInput `pulumi:"outputs"`
	Properties pulumi.MapInput                            `pulumi:"properties"`
	// scopes in ApplicationComponent defines the component-level scopes the format is <scope-type:scope-instance-name> pairs, the key represents type of `ScopeDefinition` while the value represent the name of scope instance.
	Scopes pulumi.MapInput `pulumi:"scopes"`
	// Traits define the trait of one component, the type must be array to keep the order.
	Traits ApplicationSpecComponentsTraitsArrayInput `pulumi:"traits"`
	Type   pulumi.StringInput                        `pulumi:"type"`
}

func (ApplicationSpecComponentsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecComponents)(nil)).Elem()
}

func (i ApplicationSpecComponentsArgs) ToApplicationSpecComponentsOutput() ApplicationSpecComponentsOutput {
	return i.ToApplicationSpecComponentsOutputWithContext(context.Background())
}

func (i ApplicationSpecComponentsArgs) ToApplicationSpecComponentsOutputWithContext(ctx context.Context) ApplicationSpecComponentsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecComponentsOutput)
}

// ApplicationSpecComponentsArrayInput is an input type that accepts ApplicationSpecComponentsArray and ApplicationSpecComponentsArrayOutput values.
// You can construct a concrete instance of `ApplicationSpecComponentsArrayInput` via:
//
//	ApplicationSpecComponentsArray{ ApplicationSpecComponentsArgs{...} }
type ApplicationSpecComponentsArrayInput interface {
	pulumi.Input

	ToApplicationSpecComponentsArrayOutput() ApplicationSpecComponentsArrayOutput
	ToApplicationSpecComponentsArrayOutputWithContext(context.Context) ApplicationSpecComponentsArrayOutput
}

type ApplicationSpecComponentsArray []ApplicationSpecComponentsInput

func (ApplicationSpecComponentsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecComponents)(nil)).Elem()
}

func (i ApplicationSpecComponentsArray) ToApplicationSpecComponentsArrayOutput() ApplicationSpecComponentsArrayOutput {
	return i.ToApplicationSpecComponentsArrayOutputWithContext(context.Background())
}

func (i ApplicationSpecComponentsArray) ToApplicationSpecComponentsArrayOutputWithContext(ctx context.Context) ApplicationSpecComponentsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecComponentsArrayOutput)
}

// ApplicationComponent describe the component of application
type ApplicationSpecComponentsOutput struct{ *pulumi.OutputState }

func (ApplicationSpecComponentsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecComponents)(nil)).Elem()
}

func (o ApplicationSpecComponentsOutput) ToApplicationSpecComponentsOutput() ApplicationSpecComponentsOutput {
	return o
}

func (o ApplicationSpecComponentsOutput) ToApplicationSpecComponentsOutputWithContext(ctx context.Context) ApplicationSpecComponentsOutput {
	return o
}

func (o ApplicationSpecComponentsOutput) DependsOn() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationSpecComponents) []string { return v.DependsOn }).(pulumi.StringArrayOutput)
}

// ExternalRevision specified the component revisionName
func (o ApplicationSpecComponentsOutput) ExternalRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecComponents) *string { return v.ExternalRevision }).(pulumi.StringPtrOutput)
}

// StepInputs defines variable input of WorkflowStep
func (o ApplicationSpecComponentsOutput) Inputs() ApplicationSpecComponentsInputsArrayOutput {
	return o.ApplyT(func(v ApplicationSpecComponents) []ApplicationSpecComponentsInputs { return v.Inputs }).(ApplicationSpecComponentsInputsArrayOutput)
}

func (o ApplicationSpecComponentsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecComponents) string { return v.Name }).(pulumi.StringOutput)
}

// StepOutputs defines output variable of WorkflowStep
func (o ApplicationSpecComponentsOutput) Outputs() ApplicationSpecComponentsOutputsArrayOutput {
	return o.ApplyT(func(v ApplicationSpecComponents) []ApplicationSpecComponentsOutputs { return v.Outputs }).(ApplicationSpecComponentsOutputsArrayOutput)
}

func (o ApplicationSpecComponentsOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v ApplicationSpecComponents) map[string]interface{} { return v.Properties }).(pulumi.MapOutput)
}

// scopes in ApplicationComponent defines the component-level scopes the format is <scope-type:scope-instance-name> pairs, the key represents type of `ScopeDefinition` while the value represent the name of scope instance.
func (o ApplicationSpecComponentsOutput) Scopes() pulumi.MapOutput {
	return o.ApplyT(func(v ApplicationSpecComponents) map[string]interface{} { return v.Scopes }).(pulumi.MapOutput)
}

// Traits define the trait of one component, the type must be array to keep the order.
func (o ApplicationSpecComponentsOutput) Traits() ApplicationSpecComponentsTraitsArrayOutput {
	return o.ApplyT(func(v ApplicationSpecComponents) []ApplicationSpecComponentsTraits { return v.Traits }).(ApplicationSpecComponentsTraitsArrayOutput)
}

func (o ApplicationSpecComponentsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecComponents) string { return v.Type }).(pulumi.StringOutput)
}

type ApplicationSpecComponentsArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSpecComponentsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecComponents)(nil)).Elem()
}

func (o ApplicationSpecComponentsArrayOutput) ToApplicationSpecComponentsArrayOutput() ApplicationSpecComponentsArrayOutput {
	return o
}

func (o ApplicationSpecComponentsArrayOutput) ToApplicationSpecComponentsArrayOutputWithContext(ctx context.Context) ApplicationSpecComponentsArrayOutput {
	return o
}

func (o ApplicationSpecComponentsArrayOutput) Index(i pulumi.IntInput) ApplicationSpecComponentsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationSpecComponents {
		return vs[0].([]ApplicationSpecComponents)[vs[1].(int)]
	}).(ApplicationSpecComponentsOutput)
}

type ApplicationSpecComponentsInputs struct {
	From         string  `pulumi:"from"`
	ParameterKey *string `pulumi:"parameterKey"`
}

// ApplicationSpecComponentsInputsInput is an input type that accepts ApplicationSpecComponentsInputsArgs and ApplicationSpecComponentsInputsOutput values.
// You can construct a concrete instance of `ApplicationSpecComponentsInputsInput` via:
//
//	ApplicationSpecComponentsInputsArgs{...}
type ApplicationSpecComponentsInputsInput interface {
	pulumi.Input

	ToApplicationSpecComponentsInputsOutput() ApplicationSpecComponentsInputsOutput
	ToApplicationSpecComponentsInputsOutputWithContext(context.Context) ApplicationSpecComponentsInputsOutput
}

type ApplicationSpecComponentsInputsArgs struct {
	From         pulumi.StringInput    `pulumi:"from"`
	ParameterKey pulumi.StringPtrInput `pulumi:"parameterKey"`
}

func (ApplicationSpecComponentsInputsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecComponentsInputs)(nil)).Elem()
}

func (i ApplicationSpecComponentsInputsArgs) ToApplicationSpecComponentsInputsOutput() ApplicationSpecComponentsInputsOutput {
	return i.ToApplicationSpecComponentsInputsOutputWithContext(context.Background())
}

func (i ApplicationSpecComponentsInputsArgs) ToApplicationSpecComponentsInputsOutputWithContext(ctx context.Context) ApplicationSpecComponentsInputsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecComponentsInputsOutput)
}

// ApplicationSpecComponentsInputsArrayInput is an input type that accepts ApplicationSpecComponentsInputsArray and ApplicationSpecComponentsInputsArrayOutput values.
// You can construct a concrete instance of `ApplicationSpecComponentsInputsArrayInput` via:
//
//	ApplicationSpecComponentsInputsArray{ ApplicationSpecComponentsInputsArgs{...} }
type ApplicationSpecComponentsInputsArrayInput interface {
	pulumi.Input

	ToApplicationSpecComponentsInputsArrayOutput() ApplicationSpecComponentsInputsArrayOutput
	ToApplicationSpecComponentsInputsArrayOutputWithContext(context.Context) ApplicationSpecComponentsInputsArrayOutput
}

type ApplicationSpecComponentsInputsArray []ApplicationSpecComponentsInputsInput

func (ApplicationSpecComponentsInputsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecComponentsInputs)(nil)).Elem()
}

func (i ApplicationSpecComponentsInputsArray) ToApplicationSpecComponentsInputsArrayOutput() ApplicationSpecComponentsInputsArrayOutput {
	return i.ToApplicationSpecComponentsInputsArrayOutputWithContext(context.Background())
}

func (i ApplicationSpecComponentsInputsArray) ToApplicationSpecComponentsInputsArrayOutputWithContext(ctx context.Context) ApplicationSpecComponentsInputsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecComponentsInputsArrayOutput)
}

type ApplicationSpecComponentsInputsOutput struct{ *pulumi.OutputState }

func (ApplicationSpecComponentsInputsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecComponentsInputs)(nil)).Elem()
}

func (o ApplicationSpecComponentsInputsOutput) ToApplicationSpecComponentsInputsOutput() ApplicationSpecComponentsInputsOutput {
	return o
}

func (o ApplicationSpecComponentsInputsOutput) ToApplicationSpecComponentsInputsOutputWithContext(ctx context.Context) ApplicationSpecComponentsInputsOutput {
	return o
}

func (o ApplicationSpecComponentsInputsOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecComponentsInputs) string { return v.From }).(pulumi.StringOutput)
}

func (o ApplicationSpecComponentsInputsOutput) ParameterKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecComponentsInputs) *string { return v.ParameterKey }).(pulumi.StringPtrOutput)
}

type ApplicationSpecComponentsInputsArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSpecComponentsInputsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecComponentsInputs)(nil)).Elem()
}

func (o ApplicationSpecComponentsInputsArrayOutput) ToApplicationSpecComponentsInputsArrayOutput() ApplicationSpecComponentsInputsArrayOutput {
	return o
}

func (o ApplicationSpecComponentsInputsArrayOutput) ToApplicationSpecComponentsInputsArrayOutputWithContext(ctx context.Context) ApplicationSpecComponentsInputsArrayOutput {
	return o
}

func (o ApplicationSpecComponentsInputsArrayOutput) Index(i pulumi.IntInput) ApplicationSpecComponentsInputsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationSpecComponentsInputs {
		return vs[0].([]ApplicationSpecComponentsInputs)[vs[1].(int)]
	}).(ApplicationSpecComponentsInputsOutput)
}

type ApplicationSpecComponentsOutputs struct {
	Name      string `pulumi:"name"`
	ValueFrom string `pulumi:"valueFrom"`
}

// ApplicationSpecComponentsOutputsInput is an input type that accepts ApplicationSpecComponentsOutputsArgs and ApplicationSpecComponentsOutputsOutput values.
// You can construct a concrete instance of `ApplicationSpecComponentsOutputsInput` via:
//
//	ApplicationSpecComponentsOutputsArgs{...}
type ApplicationSpecComponentsOutputsInput interface {
	pulumi.Input

	ToApplicationSpecComponentsOutputsOutput() ApplicationSpecComponentsOutputsOutput
	ToApplicationSpecComponentsOutputsOutputWithContext(context.Context) ApplicationSpecComponentsOutputsOutput
}

type ApplicationSpecComponentsOutputsArgs struct {
	Name      pulumi.StringInput `pulumi:"name"`
	ValueFrom pulumi.StringInput `pulumi:"valueFrom"`
}

func (ApplicationSpecComponentsOutputsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecComponentsOutputs)(nil)).Elem()
}

func (i ApplicationSpecComponentsOutputsArgs) ToApplicationSpecComponentsOutputsOutput() ApplicationSpecComponentsOutputsOutput {
	return i.ToApplicationSpecComponentsOutputsOutputWithContext(context.Background())
}

func (i ApplicationSpecComponentsOutputsArgs) ToApplicationSpecComponentsOutputsOutputWithContext(ctx context.Context) ApplicationSpecComponentsOutputsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecComponentsOutputsOutput)
}

// ApplicationSpecComponentsOutputsArrayInput is an input type that accepts ApplicationSpecComponentsOutputsArray and ApplicationSpecComponentsOutputsArrayOutput values.
// You can construct a concrete instance of `ApplicationSpecComponentsOutputsArrayInput` via:
//
//	ApplicationSpecComponentsOutputsArray{ ApplicationSpecComponentsOutputsArgs{...} }
type ApplicationSpecComponentsOutputsArrayInput interface {
	pulumi.Input

	ToApplicationSpecComponentsOutputsArrayOutput() ApplicationSpecComponentsOutputsArrayOutput
	ToApplicationSpecComponentsOutputsArrayOutputWithContext(context.Context) ApplicationSpecComponentsOutputsArrayOutput
}

type ApplicationSpecComponentsOutputsArray []ApplicationSpecComponentsOutputsInput

func (ApplicationSpecComponentsOutputsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecComponentsOutputs)(nil)).Elem()
}

func (i ApplicationSpecComponentsOutputsArray) ToApplicationSpecComponentsOutputsArrayOutput() ApplicationSpecComponentsOutputsArrayOutput {
	return i.ToApplicationSpecComponentsOutputsArrayOutputWithContext(context.Background())
}

func (i ApplicationSpecComponentsOutputsArray) ToApplicationSpecComponentsOutputsArrayOutputWithContext(ctx context.Context) ApplicationSpecComponentsOutputsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecComponentsOutputsArrayOutput)
}

type ApplicationSpecComponentsOutputsOutput struct{ *pulumi.OutputState }

func (ApplicationSpecComponentsOutputsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecComponentsOutputs)(nil)).Elem()
}

func (o ApplicationSpecComponentsOutputsOutput) ToApplicationSpecComponentsOutputsOutput() ApplicationSpecComponentsOutputsOutput {
	return o
}

func (o ApplicationSpecComponentsOutputsOutput) ToApplicationSpecComponentsOutputsOutputWithContext(ctx context.Context) ApplicationSpecComponentsOutputsOutput {
	return o
}

func (o ApplicationSpecComponentsOutputsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecComponentsOutputs) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationSpecComponentsOutputsOutput) ValueFrom() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecComponentsOutputs) string { return v.ValueFrom }).(pulumi.StringOutput)
}

type ApplicationSpecComponentsOutputsArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSpecComponentsOutputsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecComponentsOutputs)(nil)).Elem()
}

func (o ApplicationSpecComponentsOutputsArrayOutput) ToApplicationSpecComponentsOutputsArrayOutput() ApplicationSpecComponentsOutputsArrayOutput {
	return o
}

func (o ApplicationSpecComponentsOutputsArrayOutput) ToApplicationSpecComponentsOutputsArrayOutputWithContext(ctx context.Context) ApplicationSpecComponentsOutputsArrayOutput {
	return o
}

func (o ApplicationSpecComponentsOutputsArrayOutput) Index(i pulumi.IntInput) ApplicationSpecComponentsOutputsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationSpecComponentsOutputs {
		return vs[0].([]ApplicationSpecComponentsOutputs)[vs[1].(int)]
	}).(ApplicationSpecComponentsOutputsOutput)
}

// ApplicationTrait defines the trait of application
type ApplicationSpecComponentsTraits struct {
	Properties map[string]interface{} `pulumi:"properties"`
	Type       string                 `pulumi:"type"`
}

// ApplicationSpecComponentsTraitsInput is an input type that accepts ApplicationSpecComponentsTraitsArgs and ApplicationSpecComponentsTraitsOutput values.
// You can construct a concrete instance of `ApplicationSpecComponentsTraitsInput` via:
//
//	ApplicationSpecComponentsTraitsArgs{...}
type ApplicationSpecComponentsTraitsInput interface {
	pulumi.Input

	ToApplicationSpecComponentsTraitsOutput() ApplicationSpecComponentsTraitsOutput
	ToApplicationSpecComponentsTraitsOutputWithContext(context.Context) ApplicationSpecComponentsTraitsOutput
}

// ApplicationTrait defines the trait of application
type ApplicationSpecComponentsTraitsArgs struct {
	Properties pulumi.MapInput    `pulumi:"properties"`
	Type       pulumi.StringInput `pulumi:"type"`
}

func (ApplicationSpecComponentsTraitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecComponentsTraits)(nil)).Elem()
}

func (i ApplicationSpecComponentsTraitsArgs) ToApplicationSpecComponentsTraitsOutput() ApplicationSpecComponentsTraitsOutput {
	return i.ToApplicationSpecComponentsTraitsOutputWithContext(context.Background())
}

func (i ApplicationSpecComponentsTraitsArgs) ToApplicationSpecComponentsTraitsOutputWithContext(ctx context.Context) ApplicationSpecComponentsTraitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecComponentsTraitsOutput)
}

// ApplicationSpecComponentsTraitsArrayInput is an input type that accepts ApplicationSpecComponentsTraitsArray and ApplicationSpecComponentsTraitsArrayOutput values.
// You can construct a concrete instance of `ApplicationSpecComponentsTraitsArrayInput` via:
//
//	ApplicationSpecComponentsTraitsArray{ ApplicationSpecComponentsTraitsArgs{...} }
type ApplicationSpecComponentsTraitsArrayInput interface {
	pulumi.Input

	ToApplicationSpecComponentsTraitsArrayOutput() ApplicationSpecComponentsTraitsArrayOutput
	ToApplicationSpecComponentsTraitsArrayOutputWithContext(context.Context) ApplicationSpecComponentsTraitsArrayOutput
}

type ApplicationSpecComponentsTraitsArray []ApplicationSpecComponentsTraitsInput

func (ApplicationSpecComponentsTraitsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecComponentsTraits)(nil)).Elem()
}

func (i ApplicationSpecComponentsTraitsArray) ToApplicationSpecComponentsTraitsArrayOutput() ApplicationSpecComponentsTraitsArrayOutput {
	return i.ToApplicationSpecComponentsTraitsArrayOutputWithContext(context.Background())
}

func (i ApplicationSpecComponentsTraitsArray) ToApplicationSpecComponentsTraitsArrayOutputWithContext(ctx context.Context) ApplicationSpecComponentsTraitsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecComponentsTraitsArrayOutput)
}

// ApplicationTrait defines the trait of application
type ApplicationSpecComponentsTraitsOutput struct{ *pulumi.OutputState }

func (ApplicationSpecComponentsTraitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecComponentsTraits)(nil)).Elem()
}

func (o ApplicationSpecComponentsTraitsOutput) ToApplicationSpecComponentsTraitsOutput() ApplicationSpecComponentsTraitsOutput {
	return o
}

func (o ApplicationSpecComponentsTraitsOutput) ToApplicationSpecComponentsTraitsOutputWithContext(ctx context.Context) ApplicationSpecComponentsTraitsOutput {
	return o
}

func (o ApplicationSpecComponentsTraitsOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v ApplicationSpecComponentsTraits) map[string]interface{} { return v.Properties }).(pulumi.MapOutput)
}

func (o ApplicationSpecComponentsTraitsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecComponentsTraits) string { return v.Type }).(pulumi.StringOutput)
}

type ApplicationSpecComponentsTraitsArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSpecComponentsTraitsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecComponentsTraits)(nil)).Elem()
}

func (o ApplicationSpecComponentsTraitsArrayOutput) ToApplicationSpecComponentsTraitsArrayOutput() ApplicationSpecComponentsTraitsArrayOutput {
	return o
}

func (o ApplicationSpecComponentsTraitsArrayOutput) ToApplicationSpecComponentsTraitsArrayOutputWithContext(ctx context.Context) ApplicationSpecComponentsTraitsArrayOutput {
	return o
}

func (o ApplicationSpecComponentsTraitsArrayOutput) Index(i pulumi.IntInput) ApplicationSpecComponentsTraitsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationSpecComponentsTraits {
		return vs[0].([]ApplicationSpecComponentsTraits)[vs[1].(int)]
	}).(ApplicationSpecComponentsTraitsOutput)
}

// AppPolicy defines a global policy for all components in the app.
type ApplicationSpecPolicies struct {
	// Name is the unique name of the policy.
	Name       string                 `pulumi:"name"`
	Properties map[string]interface{} `pulumi:"properties"`
	Type       string                 `pulumi:"type"`
}

// ApplicationSpecPoliciesInput is an input type that accepts ApplicationSpecPoliciesArgs and ApplicationSpecPoliciesOutput values.
// You can construct a concrete instance of `ApplicationSpecPoliciesInput` via:
//
//	ApplicationSpecPoliciesArgs{...}
type ApplicationSpecPoliciesInput interface {
	pulumi.Input

	ToApplicationSpecPoliciesOutput() ApplicationSpecPoliciesOutput
	ToApplicationSpecPoliciesOutputWithContext(context.Context) ApplicationSpecPoliciesOutput
}

// AppPolicy defines a global policy for all components in the app.
type ApplicationSpecPoliciesArgs struct {
	// Name is the unique name of the policy.
	Name       pulumi.StringInput `pulumi:"name"`
	Properties pulumi.MapInput    `pulumi:"properties"`
	Type       pulumi.StringInput `pulumi:"type"`
}

func (ApplicationSpecPoliciesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecPolicies)(nil)).Elem()
}

func (i ApplicationSpecPoliciesArgs) ToApplicationSpecPoliciesOutput() ApplicationSpecPoliciesOutput {
	return i.ToApplicationSpecPoliciesOutputWithContext(context.Background())
}

func (i ApplicationSpecPoliciesArgs) ToApplicationSpecPoliciesOutputWithContext(ctx context.Context) ApplicationSpecPoliciesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecPoliciesOutput)
}

// ApplicationSpecPoliciesArrayInput is an input type that accepts ApplicationSpecPoliciesArray and ApplicationSpecPoliciesArrayOutput values.
// You can construct a concrete instance of `ApplicationSpecPoliciesArrayInput` via:
//
//	ApplicationSpecPoliciesArray{ ApplicationSpecPoliciesArgs{...} }
type ApplicationSpecPoliciesArrayInput interface {
	pulumi.Input

	ToApplicationSpecPoliciesArrayOutput() ApplicationSpecPoliciesArrayOutput
	ToApplicationSpecPoliciesArrayOutputWithContext(context.Context) ApplicationSpecPoliciesArrayOutput
}

type ApplicationSpecPoliciesArray []ApplicationSpecPoliciesInput

func (ApplicationSpecPoliciesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecPolicies)(nil)).Elem()
}

func (i ApplicationSpecPoliciesArray) ToApplicationSpecPoliciesArrayOutput() ApplicationSpecPoliciesArrayOutput {
	return i.ToApplicationSpecPoliciesArrayOutputWithContext(context.Background())
}

func (i ApplicationSpecPoliciesArray) ToApplicationSpecPoliciesArrayOutputWithContext(ctx context.Context) ApplicationSpecPoliciesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecPoliciesArrayOutput)
}

// AppPolicy defines a global policy for all components in the app.
type ApplicationSpecPoliciesOutput struct{ *pulumi.OutputState }

func (ApplicationSpecPoliciesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecPolicies)(nil)).Elem()
}

func (o ApplicationSpecPoliciesOutput) ToApplicationSpecPoliciesOutput() ApplicationSpecPoliciesOutput {
	return o
}

func (o ApplicationSpecPoliciesOutput) ToApplicationSpecPoliciesOutputWithContext(ctx context.Context) ApplicationSpecPoliciesOutput {
	return o
}

// Name is the unique name of the policy.
func (o ApplicationSpecPoliciesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecPolicies) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationSpecPoliciesOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v ApplicationSpecPolicies) map[string]interface{} { return v.Properties }).(pulumi.MapOutput)
}

func (o ApplicationSpecPoliciesOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecPolicies) string { return v.Type }).(pulumi.StringOutput)
}

type ApplicationSpecPoliciesArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSpecPoliciesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecPolicies)(nil)).Elem()
}

func (o ApplicationSpecPoliciesArrayOutput) ToApplicationSpecPoliciesArrayOutput() ApplicationSpecPoliciesArrayOutput {
	return o
}

func (o ApplicationSpecPoliciesArrayOutput) ToApplicationSpecPoliciesArrayOutputWithContext(ctx context.Context) ApplicationSpecPoliciesArrayOutput {
	return o
}

func (o ApplicationSpecPoliciesArrayOutput) Index(i pulumi.IntInput) ApplicationSpecPoliciesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationSpecPolicies {
		return vs[0].([]ApplicationSpecPolicies)[vs[1].(int)]
	}).(ApplicationSpecPoliciesOutput)
}

// Workflow defines how to customize the control logic. If workflow is specified, Vela won't apply any resource, but provide rendered output in AppRevision. Workflow steps are executed in array order, and each step: - will have a context in annotation. - should mark "finish" phase in status.conditions.
type ApplicationSpecWorkflow struct {
	// WorkflowExecuteMode defines the mode of workflow execution
	Mode  *ApplicationSpecWorkflowMode   `pulumi:"mode"`
	Ref   *string                        `pulumi:"ref"`
	Steps []ApplicationSpecWorkflowSteps `pulumi:"steps"`
}

// ApplicationSpecWorkflowInput is an input type that accepts ApplicationSpecWorkflowArgs and ApplicationSpecWorkflowOutput values.
// You can construct a concrete instance of `ApplicationSpecWorkflowInput` via:
//
//	ApplicationSpecWorkflowArgs{...}
type ApplicationSpecWorkflowInput interface {
	pulumi.Input

	ToApplicationSpecWorkflowOutput() ApplicationSpecWorkflowOutput
	ToApplicationSpecWorkflowOutputWithContext(context.Context) ApplicationSpecWorkflowOutput
}

// Workflow defines how to customize the control logic. If workflow is specified, Vela won't apply any resource, but provide rendered output in AppRevision. Workflow steps are executed in array order, and each step: - will have a context in annotation. - should mark "finish" phase in status.conditions.
type ApplicationSpecWorkflowArgs struct {
	// WorkflowExecuteMode defines the mode of workflow execution
	Mode  ApplicationSpecWorkflowModePtrInput    `pulumi:"mode"`
	Ref   pulumi.StringPtrInput                  `pulumi:"ref"`
	Steps ApplicationSpecWorkflowStepsArrayInput `pulumi:"steps"`
}

func (ApplicationSpecWorkflowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecWorkflow)(nil)).Elem()
}

func (i ApplicationSpecWorkflowArgs) ToApplicationSpecWorkflowOutput() ApplicationSpecWorkflowOutput {
	return i.ToApplicationSpecWorkflowOutputWithContext(context.Background())
}

func (i ApplicationSpecWorkflowArgs) ToApplicationSpecWorkflowOutputWithContext(ctx context.Context) ApplicationSpecWorkflowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecWorkflowOutput)
}

func (i ApplicationSpecWorkflowArgs) ToApplicationSpecWorkflowPtrOutput() ApplicationSpecWorkflowPtrOutput {
	return i.ToApplicationSpecWorkflowPtrOutputWithContext(context.Background())
}

func (i ApplicationSpecWorkflowArgs) ToApplicationSpecWorkflowPtrOutputWithContext(ctx context.Context) ApplicationSpecWorkflowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecWorkflowOutput).ToApplicationSpecWorkflowPtrOutputWithContext(ctx)
}

// ApplicationSpecWorkflowPtrInput is an input type that accepts ApplicationSpecWorkflowArgs, ApplicationSpecWorkflowPtr and ApplicationSpecWorkflowPtrOutput values.
// You can construct a concrete instance of `ApplicationSpecWorkflowPtrInput` via:
//
//	        ApplicationSpecWorkflowArgs{...}
//
//	or:
//
//	        nil
type ApplicationSpecWorkflowPtrInput interface {
	pulumi.Input

	ToApplicationSpecWorkflowPtrOutput() ApplicationSpecWorkflowPtrOutput
	ToApplicationSpecWorkflowPtrOutputWithContext(context.Context) ApplicationSpecWorkflowPtrOutput
}

type applicationSpecWorkflowPtrType ApplicationSpecWorkflowArgs

func ApplicationSpecWorkflowPtr(v *ApplicationSpecWorkflowArgs) ApplicationSpecWorkflowPtrInput {
	return (*applicationSpecWorkflowPtrType)(v)
}

func (*applicationSpecWorkflowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecWorkflow)(nil)).Elem()
}

func (i *applicationSpecWorkflowPtrType) ToApplicationSpecWorkflowPtrOutput() ApplicationSpecWorkflowPtrOutput {
	return i.ToApplicationSpecWorkflowPtrOutputWithContext(context.Background())
}

func (i *applicationSpecWorkflowPtrType) ToApplicationSpecWorkflowPtrOutputWithContext(ctx context.Context) ApplicationSpecWorkflowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecWorkflowPtrOutput)
}

// Workflow defines how to customize the control logic. If workflow is specified, Vela won't apply any resource, but provide rendered output in AppRevision. Workflow steps are executed in array order, and each step: - will have a context in annotation. - should mark "finish" phase in status.conditions.
type ApplicationSpecWorkflowOutput struct{ *pulumi.OutputState }

func (ApplicationSpecWorkflowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecWorkflow)(nil)).Elem()
}

func (o ApplicationSpecWorkflowOutput) ToApplicationSpecWorkflowOutput() ApplicationSpecWorkflowOutput {
	return o
}

func (o ApplicationSpecWorkflowOutput) ToApplicationSpecWorkflowOutputWithContext(ctx context.Context) ApplicationSpecWorkflowOutput {
	return o
}

func (o ApplicationSpecWorkflowOutput) ToApplicationSpecWorkflowPtrOutput() ApplicationSpecWorkflowPtrOutput {
	return o.ToApplicationSpecWorkflowPtrOutputWithContext(context.Background())
}

func (o ApplicationSpecWorkflowOutput) ToApplicationSpecWorkflowPtrOutputWithContext(ctx context.Context) ApplicationSpecWorkflowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationSpecWorkflow) *ApplicationSpecWorkflow {
		return &v
	}).(ApplicationSpecWorkflowPtrOutput)
}

// WorkflowExecuteMode defines the mode of workflow execution
func (o ApplicationSpecWorkflowOutput) Mode() ApplicationSpecWorkflowModePtrOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflow) *ApplicationSpecWorkflowMode { return v.Mode }).(ApplicationSpecWorkflowModePtrOutput)
}

func (o ApplicationSpecWorkflowOutput) Ref() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflow) *string { return v.Ref }).(pulumi.StringPtrOutput)
}

func (o ApplicationSpecWorkflowOutput) Steps() ApplicationSpecWorkflowStepsArrayOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflow) []ApplicationSpecWorkflowSteps { return v.Steps }).(ApplicationSpecWorkflowStepsArrayOutput)
}

type ApplicationSpecWorkflowPtrOutput struct{ *pulumi.OutputState }

func (ApplicationSpecWorkflowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecWorkflow)(nil)).Elem()
}

func (o ApplicationSpecWorkflowPtrOutput) ToApplicationSpecWorkflowPtrOutput() ApplicationSpecWorkflowPtrOutput {
	return o
}

func (o ApplicationSpecWorkflowPtrOutput) ToApplicationSpecWorkflowPtrOutputWithContext(ctx context.Context) ApplicationSpecWorkflowPtrOutput {
	return o
}

func (o ApplicationSpecWorkflowPtrOutput) Elem() ApplicationSpecWorkflowOutput {
	return o.ApplyT(func(v *ApplicationSpecWorkflow) ApplicationSpecWorkflow {
		if v != nil {
			return *v
		}
		var ret ApplicationSpecWorkflow
		return ret
	}).(ApplicationSpecWorkflowOutput)
}

// WorkflowExecuteMode defines the mode of workflow execution
func (o ApplicationSpecWorkflowPtrOutput) Mode() ApplicationSpecWorkflowModePtrOutput {
	return o.ApplyT(func(v *ApplicationSpecWorkflow) *ApplicationSpecWorkflowMode {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(ApplicationSpecWorkflowModePtrOutput)
}

func (o ApplicationSpecWorkflowPtrOutput) Ref() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecWorkflow) *string {
		if v == nil {
			return nil
		}
		return v.Ref
	}).(pulumi.StringPtrOutput)
}

func (o ApplicationSpecWorkflowPtrOutput) Steps() ApplicationSpecWorkflowStepsArrayOutput {
	return o.ApplyT(func(v *ApplicationSpecWorkflow) []ApplicationSpecWorkflowSteps {
		if v == nil {
			return nil
		}
		return v.Steps
	}).(ApplicationSpecWorkflowStepsArrayOutput)
}

// WorkflowExecuteMode defines the mode of workflow execution
type ApplicationSpecWorkflowMode struct {
	// Steps is the mode of workflow steps execution
	Steps *string `pulumi:"steps"`
	// SubSteps is the mode of workflow sub steps execution
	SubSteps *string `pulumi:"subSteps"`
}

// ApplicationSpecWorkflowModeInput is an input type that accepts ApplicationSpecWorkflowModeArgs and ApplicationSpecWorkflowModeOutput values.
// You can construct a concrete instance of `ApplicationSpecWorkflowModeInput` via:
//
//	ApplicationSpecWorkflowModeArgs{...}
type ApplicationSpecWorkflowModeInput interface {
	pulumi.Input

	ToApplicationSpecWorkflowModeOutput() ApplicationSpecWorkflowModeOutput
	ToApplicationSpecWorkflowModeOutputWithContext(context.Context) ApplicationSpecWorkflowModeOutput
}

// WorkflowExecuteMode defines the mode of workflow execution
type ApplicationSpecWorkflowModeArgs struct {
	// Steps is the mode of workflow steps execution
	Steps pulumi.StringPtrInput `pulumi:"steps"`
	// SubSteps is the mode of workflow sub steps execution
	SubSteps pulumi.StringPtrInput `pulumi:"subSteps"`
}

func (ApplicationSpecWorkflowModeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecWorkflowMode)(nil)).Elem()
}

func (i ApplicationSpecWorkflowModeArgs) ToApplicationSpecWorkflowModeOutput() ApplicationSpecWorkflowModeOutput {
	return i.ToApplicationSpecWorkflowModeOutputWithContext(context.Background())
}

func (i ApplicationSpecWorkflowModeArgs) ToApplicationSpecWorkflowModeOutputWithContext(ctx context.Context) ApplicationSpecWorkflowModeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecWorkflowModeOutput)
}

func (i ApplicationSpecWorkflowModeArgs) ToApplicationSpecWorkflowModePtrOutput() ApplicationSpecWorkflowModePtrOutput {
	return i.ToApplicationSpecWorkflowModePtrOutputWithContext(context.Background())
}

func (i ApplicationSpecWorkflowModeArgs) ToApplicationSpecWorkflowModePtrOutputWithContext(ctx context.Context) ApplicationSpecWorkflowModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecWorkflowModeOutput).ToApplicationSpecWorkflowModePtrOutputWithContext(ctx)
}

// ApplicationSpecWorkflowModePtrInput is an input type that accepts ApplicationSpecWorkflowModeArgs, ApplicationSpecWorkflowModePtr and ApplicationSpecWorkflowModePtrOutput values.
// You can construct a concrete instance of `ApplicationSpecWorkflowModePtrInput` via:
//
//	        ApplicationSpecWorkflowModeArgs{...}
//
//	or:
//
//	        nil
type ApplicationSpecWorkflowModePtrInput interface {
	pulumi.Input

	ToApplicationSpecWorkflowModePtrOutput() ApplicationSpecWorkflowModePtrOutput
	ToApplicationSpecWorkflowModePtrOutputWithContext(context.Context) ApplicationSpecWorkflowModePtrOutput
}

type applicationSpecWorkflowModePtrType ApplicationSpecWorkflowModeArgs

func ApplicationSpecWorkflowModePtr(v *ApplicationSpecWorkflowModeArgs) ApplicationSpecWorkflowModePtrInput {
	return (*applicationSpecWorkflowModePtrType)(v)
}

func (*applicationSpecWorkflowModePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecWorkflowMode)(nil)).Elem()
}

func (i *applicationSpecWorkflowModePtrType) ToApplicationSpecWorkflowModePtrOutput() ApplicationSpecWorkflowModePtrOutput {
	return i.ToApplicationSpecWorkflowModePtrOutputWithContext(context.Background())
}

func (i *applicationSpecWorkflowModePtrType) ToApplicationSpecWorkflowModePtrOutputWithContext(ctx context.Context) ApplicationSpecWorkflowModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecWorkflowModePtrOutput)
}

// WorkflowExecuteMode defines the mode of workflow execution
type ApplicationSpecWorkflowModeOutput struct{ *pulumi.OutputState }

func (ApplicationSpecWorkflowModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecWorkflowMode)(nil)).Elem()
}

func (o ApplicationSpecWorkflowModeOutput) ToApplicationSpecWorkflowModeOutput() ApplicationSpecWorkflowModeOutput {
	return o
}

func (o ApplicationSpecWorkflowModeOutput) ToApplicationSpecWorkflowModeOutputWithContext(ctx context.Context) ApplicationSpecWorkflowModeOutput {
	return o
}

func (o ApplicationSpecWorkflowModeOutput) ToApplicationSpecWorkflowModePtrOutput() ApplicationSpecWorkflowModePtrOutput {
	return o.ToApplicationSpecWorkflowModePtrOutputWithContext(context.Background())
}

func (o ApplicationSpecWorkflowModeOutput) ToApplicationSpecWorkflowModePtrOutputWithContext(ctx context.Context) ApplicationSpecWorkflowModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationSpecWorkflowMode) *ApplicationSpecWorkflowMode {
		return &v
	}).(ApplicationSpecWorkflowModePtrOutput)
}

// Steps is the mode of workflow steps execution
func (o ApplicationSpecWorkflowModeOutput) Steps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflowMode) *string { return v.Steps }).(pulumi.StringPtrOutput)
}

// SubSteps is the mode of workflow sub steps execution
func (o ApplicationSpecWorkflowModeOutput) SubSteps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflowMode) *string { return v.SubSteps }).(pulumi.StringPtrOutput)
}

type ApplicationSpecWorkflowModePtrOutput struct{ *pulumi.OutputState }

func (ApplicationSpecWorkflowModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecWorkflowMode)(nil)).Elem()
}

func (o ApplicationSpecWorkflowModePtrOutput) ToApplicationSpecWorkflowModePtrOutput() ApplicationSpecWorkflowModePtrOutput {
	return o
}

func (o ApplicationSpecWorkflowModePtrOutput) ToApplicationSpecWorkflowModePtrOutputWithContext(ctx context.Context) ApplicationSpecWorkflowModePtrOutput {
	return o
}

func (o ApplicationSpecWorkflowModePtrOutput) Elem() ApplicationSpecWorkflowModeOutput {
	return o.ApplyT(func(v *ApplicationSpecWorkflowMode) ApplicationSpecWorkflowMode {
		if v != nil {
			return *v
		}
		var ret ApplicationSpecWorkflowMode
		return ret
	}).(ApplicationSpecWorkflowModeOutput)
}

// Steps is the mode of workflow steps execution
func (o ApplicationSpecWorkflowModePtrOutput) Steps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecWorkflowMode) *string {
		if v == nil {
			return nil
		}
		return v.Steps
	}).(pulumi.StringPtrOutput)
}

// SubSteps is the mode of workflow sub steps execution
func (o ApplicationSpecWorkflowModePtrOutput) SubSteps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecWorkflowMode) *string {
		if v == nil {
			return nil
		}
		return v.SubSteps
	}).(pulumi.StringPtrOutput)
}

// WorkflowStep defines how to execute a workflow step.
type ApplicationSpecWorkflowSteps struct {
	// DependsOn is the dependency of the step
	DependsOn []string `pulumi:"dependsOn"`
	// If is the if condition of the step
	If *string `pulumi:"if"`
	// Inputs is the inputs of the step
	Inputs []ApplicationSpecWorkflowStepsInputs `pulumi:"inputs"`
	// Meta is the meta data of the workflow step.
	Meta *ApplicationSpecWorkflowStepsMeta `pulumi:"meta"`
	// Name is the unique name of the workflow step.
	Name *string `pulumi:"name"`
	// Outputs is the outputs of the step
	Outputs []ApplicationSpecWorkflowStepsOutputs `pulumi:"outputs"`
	// Properties is the properties of the step
	Properties map[string]interface{}                 `pulumi:"properties"`
	SubSteps   []ApplicationSpecWorkflowStepsSubsteps `pulumi:"subSteps"`
	// Timeout is the timeout of the step
	Timeout *string `pulumi:"timeout"`
	// Type is the type of the workflow step.
	Type string `pulumi:"type"`
}

// ApplicationSpecWorkflowStepsInput is an input type that accepts ApplicationSpecWorkflowStepsArgs and ApplicationSpecWorkflowStepsOutput values.
// You can construct a concrete instance of `ApplicationSpecWorkflowStepsInput` via:
//
//	ApplicationSpecWorkflowStepsArgs{...}
type ApplicationSpecWorkflowStepsInput interface {
	pulumi.Input

	ToApplicationSpecWorkflowStepsOutput() ApplicationSpecWorkflowStepsOutput
	ToApplicationSpecWorkflowStepsOutputWithContext(context.Context) ApplicationSpecWorkflowStepsOutput
}

// WorkflowStep defines how to execute a workflow step.
type ApplicationSpecWorkflowStepsArgs struct {
	// DependsOn is the dependency of the step
	DependsOn pulumi.StringArrayInput `pulumi:"dependsOn"`
	// If is the if condition of the step
	If pulumi.StringPtrInput `pulumi:"if"`
	// Inputs is the inputs of the step
	Inputs ApplicationSpecWorkflowStepsInputsArrayInput `pulumi:"inputs"`
	// Meta is the meta data of the workflow step.
	Meta ApplicationSpecWorkflowStepsMetaPtrInput `pulumi:"meta"`
	// Name is the unique name of the workflow step.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Outputs is the outputs of the step
	Outputs ApplicationSpecWorkflowStepsOutputsArrayInput `pulumi:"outputs"`
	// Properties is the properties of the step
	Properties pulumi.MapInput                                `pulumi:"properties"`
	SubSteps   ApplicationSpecWorkflowStepsSubstepsArrayInput `pulumi:"subSteps"`
	// Timeout is the timeout of the step
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// Type is the type of the workflow step.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ApplicationSpecWorkflowStepsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecWorkflowSteps)(nil)).Elem()
}

func (i ApplicationSpecWorkflowStepsArgs) ToApplicationSpecWorkflowStepsOutput() ApplicationSpecWorkflowStepsOutput {
	return i.ToApplicationSpecWorkflowStepsOutputWithContext(context.Background())
}

func (i ApplicationSpecWorkflowStepsArgs) ToApplicationSpecWorkflowStepsOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecWorkflowStepsOutput)
}

// ApplicationSpecWorkflowStepsArrayInput is an input type that accepts ApplicationSpecWorkflowStepsArray and ApplicationSpecWorkflowStepsArrayOutput values.
// You can construct a concrete instance of `ApplicationSpecWorkflowStepsArrayInput` via:
//
//	ApplicationSpecWorkflowStepsArray{ ApplicationSpecWorkflowStepsArgs{...} }
type ApplicationSpecWorkflowStepsArrayInput interface {
	pulumi.Input

	ToApplicationSpecWorkflowStepsArrayOutput() ApplicationSpecWorkflowStepsArrayOutput
	ToApplicationSpecWorkflowStepsArrayOutputWithContext(context.Context) ApplicationSpecWorkflowStepsArrayOutput
}

type ApplicationSpecWorkflowStepsArray []ApplicationSpecWorkflowStepsInput

func (ApplicationSpecWorkflowStepsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecWorkflowSteps)(nil)).Elem()
}

func (i ApplicationSpecWorkflowStepsArray) ToApplicationSpecWorkflowStepsArrayOutput() ApplicationSpecWorkflowStepsArrayOutput {
	return i.ToApplicationSpecWorkflowStepsArrayOutputWithContext(context.Background())
}

func (i ApplicationSpecWorkflowStepsArray) ToApplicationSpecWorkflowStepsArrayOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecWorkflowStepsArrayOutput)
}

// WorkflowStep defines how to execute a workflow step.
type ApplicationSpecWorkflowStepsOutput struct{ *pulumi.OutputState }

func (ApplicationSpecWorkflowStepsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecWorkflowSteps)(nil)).Elem()
}

func (o ApplicationSpecWorkflowStepsOutput) ToApplicationSpecWorkflowStepsOutput() ApplicationSpecWorkflowStepsOutput {
	return o
}

func (o ApplicationSpecWorkflowStepsOutput) ToApplicationSpecWorkflowStepsOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsOutput {
	return o
}

// DependsOn is the dependency of the step
func (o ApplicationSpecWorkflowStepsOutput) DependsOn() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflowSteps) []string { return v.DependsOn }).(pulumi.StringArrayOutput)
}

// If is the if condition of the step
func (o ApplicationSpecWorkflowStepsOutput) If() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflowSteps) *string { return v.If }).(pulumi.StringPtrOutput)
}

// Inputs is the inputs of the step
func (o ApplicationSpecWorkflowStepsOutput) Inputs() ApplicationSpecWorkflowStepsInputsArrayOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflowSteps) []ApplicationSpecWorkflowStepsInputs { return v.Inputs }).(ApplicationSpecWorkflowStepsInputsArrayOutput)
}

// Meta is the meta data of the workflow step.
func (o ApplicationSpecWorkflowStepsOutput) Meta() ApplicationSpecWorkflowStepsMetaPtrOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflowSteps) *ApplicationSpecWorkflowStepsMeta { return v.Meta }).(ApplicationSpecWorkflowStepsMetaPtrOutput)
}

// Name is the unique name of the workflow step.
func (o ApplicationSpecWorkflowStepsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflowSteps) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Outputs is the outputs of the step
func (o ApplicationSpecWorkflowStepsOutput) Outputs() ApplicationSpecWorkflowStepsOutputsArrayOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflowSteps) []ApplicationSpecWorkflowStepsOutputs { return v.Outputs }).(ApplicationSpecWorkflowStepsOutputsArrayOutput)
}

// Properties is the properties of the step
func (o ApplicationSpecWorkflowStepsOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflowSteps) map[string]interface{} { return v.Properties }).(pulumi.MapOutput)
}

func (o ApplicationSpecWorkflowStepsOutput) SubSteps() ApplicationSpecWorkflowStepsSubstepsArrayOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflowSteps) []ApplicationSpecWorkflowStepsSubsteps { return v.SubSteps }).(ApplicationSpecWorkflowStepsSubstepsArrayOutput)
}

// Timeout is the timeout of the step
func (o ApplicationSpecWorkflowStepsOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflowSteps) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Type is the type of the workflow step.
func (o ApplicationSpecWorkflowStepsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflowSteps) string { return v.Type }).(pulumi.StringOutput)
}

type ApplicationSpecWorkflowStepsArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSpecWorkflowStepsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecWorkflowSteps)(nil)).Elem()
}

func (o ApplicationSpecWorkflowStepsArrayOutput) ToApplicationSpecWorkflowStepsArrayOutput() ApplicationSpecWorkflowStepsArrayOutput {
	return o
}

func (o ApplicationSpecWorkflowStepsArrayOutput) ToApplicationSpecWorkflowStepsArrayOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsArrayOutput {
	return o
}

func (o ApplicationSpecWorkflowStepsArrayOutput) Index(i pulumi.IntInput) ApplicationSpecWorkflowStepsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationSpecWorkflowSteps {
		return vs[0].([]ApplicationSpecWorkflowSteps)[vs[1].(int)]
	}).(ApplicationSpecWorkflowStepsOutput)
}

type ApplicationSpecWorkflowStepsInputs struct {
	From         string  `pulumi:"from"`
	ParameterKey *string `pulumi:"parameterKey"`
}

// ApplicationSpecWorkflowStepsInputsInput is an input type that accepts ApplicationSpecWorkflowStepsInputsArgs and ApplicationSpecWorkflowStepsInputsOutput values.
// You can construct a concrete instance of `ApplicationSpecWorkflowStepsInputsInput` via:
//
//	ApplicationSpecWorkflowStepsInputsArgs{...}
type ApplicationSpecWorkflowStepsInputsInput interface {
	pulumi.Input

	ToApplicationSpecWorkflowStepsInputsOutput() ApplicationSpecWorkflowStepsInputsOutput
	ToApplicationSpecWorkflowStepsInputsOutputWithContext(context.Context) ApplicationSpecWorkflowStepsInputsOutput
}

type ApplicationSpecWorkflowStepsInputsArgs struct {
	From         pulumi.StringInput    `pulumi:"from"`
	ParameterKey pulumi.StringPtrInput `pulumi:"parameterKey"`
}

func (ApplicationSpecWorkflowStepsInputsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecWorkflowStepsInputs)(nil)).Elem()
}

func (i ApplicationSpecWorkflowStepsInputsArgs) ToApplicationSpecWorkflowStepsInputsOutput() ApplicationSpecWorkflowStepsInputsOutput {
	return i.ToApplicationSpecWorkflowStepsInputsOutputWithContext(context.Background())
}

func (i ApplicationSpecWorkflowStepsInputsArgs) ToApplicationSpecWorkflowStepsInputsOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsInputsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecWorkflowStepsInputsOutput)
}

// ApplicationSpecWorkflowStepsInputsArrayInput is an input type that accepts ApplicationSpecWorkflowStepsInputsArray and ApplicationSpecWorkflowStepsInputsArrayOutput values.
// You can construct a concrete instance of `ApplicationSpecWorkflowStepsInputsArrayInput` via:
//
//	ApplicationSpecWorkflowStepsInputsArray{ ApplicationSpecWorkflowStepsInputsArgs{...} }
type ApplicationSpecWorkflowStepsInputsArrayInput interface {
	pulumi.Input

	ToApplicationSpecWorkflowStepsInputsArrayOutput() ApplicationSpecWorkflowStepsInputsArrayOutput
	ToApplicationSpecWorkflowStepsInputsArrayOutputWithContext(context.Context) ApplicationSpecWorkflowStepsInputsArrayOutput
}

type ApplicationSpecWorkflowStepsInputsArray []ApplicationSpecWorkflowStepsInputsInput

func (ApplicationSpecWorkflowStepsInputsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecWorkflowStepsInputs)(nil)).Elem()
}

func (i ApplicationSpecWorkflowStepsInputsArray) ToApplicationSpecWorkflowStepsInputsArrayOutput() ApplicationSpecWorkflowStepsInputsArrayOutput {
	return i.ToApplicationSpecWorkflowStepsInputsArrayOutputWithContext(context.Background())
}

func (i ApplicationSpecWorkflowStepsInputsArray) ToApplicationSpecWorkflowStepsInputsArrayOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsInputsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecWorkflowStepsInputsArrayOutput)
}

type ApplicationSpecWorkflowStepsInputsOutput struct{ *pulumi.OutputState }

func (ApplicationSpecWorkflowStepsInputsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecWorkflowStepsInputs)(nil)).Elem()
}

func (o ApplicationSpecWorkflowStepsInputsOutput) ToApplicationSpecWorkflowStepsInputsOutput() ApplicationSpecWorkflowStepsInputsOutput {
	return o
}

func (o ApplicationSpecWorkflowStepsInputsOutput) ToApplicationSpecWorkflowStepsInputsOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsInputsOutput {
	return o
}

func (o ApplicationSpecWorkflowStepsInputsOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflowStepsInputs) string { return v.From }).(pulumi.StringOutput)
}

func (o ApplicationSpecWorkflowStepsInputsOutput) ParameterKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflowStepsInputs) *string { return v.ParameterKey }).(pulumi.StringPtrOutput)
}

type ApplicationSpecWorkflowStepsInputsArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSpecWorkflowStepsInputsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecWorkflowStepsInputs)(nil)).Elem()
}

func (o ApplicationSpecWorkflowStepsInputsArrayOutput) ToApplicationSpecWorkflowStepsInputsArrayOutput() ApplicationSpecWorkflowStepsInputsArrayOutput {
	return o
}

func (o ApplicationSpecWorkflowStepsInputsArrayOutput) ToApplicationSpecWorkflowStepsInputsArrayOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsInputsArrayOutput {
	return o
}

func (o ApplicationSpecWorkflowStepsInputsArrayOutput) Index(i pulumi.IntInput) ApplicationSpecWorkflowStepsInputsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationSpecWorkflowStepsInputs {
		return vs[0].([]ApplicationSpecWorkflowStepsInputs)[vs[1].(int)]
	}).(ApplicationSpecWorkflowStepsInputsOutput)
}

// Meta is the meta data of the workflow step.
type ApplicationSpecWorkflowStepsMeta struct {
	Alias *string `pulumi:"alias"`
}

// ApplicationSpecWorkflowStepsMetaInput is an input type that accepts ApplicationSpecWorkflowStepsMetaArgs and ApplicationSpecWorkflowStepsMetaOutput values.
// You can construct a concrete instance of `ApplicationSpecWorkflowStepsMetaInput` via:
//
//	ApplicationSpecWorkflowStepsMetaArgs{...}
type ApplicationSpecWorkflowStepsMetaInput interface {
	pulumi.Input

	ToApplicationSpecWorkflowStepsMetaOutput() ApplicationSpecWorkflowStepsMetaOutput
	ToApplicationSpecWorkflowStepsMetaOutputWithContext(context.Context) ApplicationSpecWorkflowStepsMetaOutput
}

// Meta is the meta data of the workflow step.
type ApplicationSpecWorkflowStepsMetaArgs struct {
	Alias pulumi.StringPtrInput `pulumi:"alias"`
}

func (ApplicationSpecWorkflowStepsMetaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecWorkflowStepsMeta)(nil)).Elem()
}

func (i ApplicationSpecWorkflowStepsMetaArgs) ToApplicationSpecWorkflowStepsMetaOutput() ApplicationSpecWorkflowStepsMetaOutput {
	return i.ToApplicationSpecWorkflowStepsMetaOutputWithContext(context.Background())
}

func (i ApplicationSpecWorkflowStepsMetaArgs) ToApplicationSpecWorkflowStepsMetaOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsMetaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecWorkflowStepsMetaOutput)
}

func (i ApplicationSpecWorkflowStepsMetaArgs) ToApplicationSpecWorkflowStepsMetaPtrOutput() ApplicationSpecWorkflowStepsMetaPtrOutput {
	return i.ToApplicationSpecWorkflowStepsMetaPtrOutputWithContext(context.Background())
}

func (i ApplicationSpecWorkflowStepsMetaArgs) ToApplicationSpecWorkflowStepsMetaPtrOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsMetaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecWorkflowStepsMetaOutput).ToApplicationSpecWorkflowStepsMetaPtrOutputWithContext(ctx)
}

// ApplicationSpecWorkflowStepsMetaPtrInput is an input type that accepts ApplicationSpecWorkflowStepsMetaArgs, ApplicationSpecWorkflowStepsMetaPtr and ApplicationSpecWorkflowStepsMetaPtrOutput values.
// You can construct a concrete instance of `ApplicationSpecWorkflowStepsMetaPtrInput` via:
//
//	        ApplicationSpecWorkflowStepsMetaArgs{...}
//
//	or:
//
//	        nil
type ApplicationSpecWorkflowStepsMetaPtrInput interface {
	pulumi.Input

	ToApplicationSpecWorkflowStepsMetaPtrOutput() ApplicationSpecWorkflowStepsMetaPtrOutput
	ToApplicationSpecWorkflowStepsMetaPtrOutputWithContext(context.Context) ApplicationSpecWorkflowStepsMetaPtrOutput
}

type applicationSpecWorkflowStepsMetaPtrType ApplicationSpecWorkflowStepsMetaArgs

func ApplicationSpecWorkflowStepsMetaPtr(v *ApplicationSpecWorkflowStepsMetaArgs) ApplicationSpecWorkflowStepsMetaPtrInput {
	return (*applicationSpecWorkflowStepsMetaPtrType)(v)
}

func (*applicationSpecWorkflowStepsMetaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecWorkflowStepsMeta)(nil)).Elem()
}

func (i *applicationSpecWorkflowStepsMetaPtrType) ToApplicationSpecWorkflowStepsMetaPtrOutput() ApplicationSpecWorkflowStepsMetaPtrOutput {
	return i.ToApplicationSpecWorkflowStepsMetaPtrOutputWithContext(context.Background())
}

func (i *applicationSpecWorkflowStepsMetaPtrType) ToApplicationSpecWorkflowStepsMetaPtrOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsMetaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecWorkflowStepsMetaPtrOutput)
}

// Meta is the meta data of the workflow step.
type ApplicationSpecWorkflowStepsMetaOutput struct{ *pulumi.OutputState }

func (ApplicationSpecWorkflowStepsMetaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecWorkflowStepsMeta)(nil)).Elem()
}

func (o ApplicationSpecWorkflowStepsMetaOutput) ToApplicationSpecWorkflowStepsMetaOutput() ApplicationSpecWorkflowStepsMetaOutput {
	return o
}

func (o ApplicationSpecWorkflowStepsMetaOutput) ToApplicationSpecWorkflowStepsMetaOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsMetaOutput {
	return o
}

func (o ApplicationSpecWorkflowStepsMetaOutput) ToApplicationSpecWorkflowStepsMetaPtrOutput() ApplicationSpecWorkflowStepsMetaPtrOutput {
	return o.ToApplicationSpecWorkflowStepsMetaPtrOutputWithContext(context.Background())
}

func (o ApplicationSpecWorkflowStepsMetaOutput) ToApplicationSpecWorkflowStepsMetaPtrOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsMetaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationSpecWorkflowStepsMeta) *ApplicationSpecWorkflowStepsMeta {
		return &v
	}).(ApplicationSpecWorkflowStepsMetaPtrOutput)
}

func (o ApplicationSpecWorkflowStepsMetaOutput) Alias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflowStepsMeta) *string { return v.Alias }).(pulumi.StringPtrOutput)
}

type ApplicationSpecWorkflowStepsMetaPtrOutput struct{ *pulumi.OutputState }

func (ApplicationSpecWorkflowStepsMetaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecWorkflowStepsMeta)(nil)).Elem()
}

func (o ApplicationSpecWorkflowStepsMetaPtrOutput) ToApplicationSpecWorkflowStepsMetaPtrOutput() ApplicationSpecWorkflowStepsMetaPtrOutput {
	return o
}

func (o ApplicationSpecWorkflowStepsMetaPtrOutput) ToApplicationSpecWorkflowStepsMetaPtrOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsMetaPtrOutput {
	return o
}

func (o ApplicationSpecWorkflowStepsMetaPtrOutput) Elem() ApplicationSpecWorkflowStepsMetaOutput {
	return o.ApplyT(func(v *ApplicationSpecWorkflowStepsMeta) ApplicationSpecWorkflowStepsMeta {
		if v != nil {
			return *v
		}
		var ret ApplicationSpecWorkflowStepsMeta
		return ret
	}).(ApplicationSpecWorkflowStepsMetaOutput)
}

func (o ApplicationSpecWorkflowStepsMetaPtrOutput) Alias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecWorkflowStepsMeta) *string {
		if v == nil {
			return nil
		}
		return v.Alias
	}).(pulumi.StringPtrOutput)
}

type ApplicationSpecWorkflowStepsOutputs struct {
	Name      string `pulumi:"name"`
	ValueFrom string `pulumi:"valueFrom"`
}

// ApplicationSpecWorkflowStepsOutputsInput is an input type that accepts ApplicationSpecWorkflowStepsOutputsArgs and ApplicationSpecWorkflowStepsOutputsOutput values.
// You can construct a concrete instance of `ApplicationSpecWorkflowStepsOutputsInput` via:
//
//	ApplicationSpecWorkflowStepsOutputsArgs{...}
type ApplicationSpecWorkflowStepsOutputsInput interface {
	pulumi.Input

	ToApplicationSpecWorkflowStepsOutputsOutput() ApplicationSpecWorkflowStepsOutputsOutput
	ToApplicationSpecWorkflowStepsOutputsOutputWithContext(context.Context) ApplicationSpecWorkflowStepsOutputsOutput
}

type ApplicationSpecWorkflowStepsOutputsArgs struct {
	Name      pulumi.StringInput `pulumi:"name"`
	ValueFrom pulumi.StringInput `pulumi:"valueFrom"`
}

func (ApplicationSpecWorkflowStepsOutputsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecWorkflowStepsOutputs)(nil)).Elem()
}

func (i ApplicationSpecWorkflowStepsOutputsArgs) ToApplicationSpecWorkflowStepsOutputsOutput() ApplicationSpecWorkflowStepsOutputsOutput {
	return i.ToApplicationSpecWorkflowStepsOutputsOutputWithContext(context.Background())
}

func (i ApplicationSpecWorkflowStepsOutputsArgs) ToApplicationSpecWorkflowStepsOutputsOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsOutputsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecWorkflowStepsOutputsOutput)
}

// ApplicationSpecWorkflowStepsOutputsArrayInput is an input type that accepts ApplicationSpecWorkflowStepsOutputsArray and ApplicationSpecWorkflowStepsOutputsArrayOutput values.
// You can construct a concrete instance of `ApplicationSpecWorkflowStepsOutputsArrayInput` via:
//
//	ApplicationSpecWorkflowStepsOutputsArray{ ApplicationSpecWorkflowStepsOutputsArgs{...} }
type ApplicationSpecWorkflowStepsOutputsArrayInput interface {
	pulumi.Input

	ToApplicationSpecWorkflowStepsOutputsArrayOutput() ApplicationSpecWorkflowStepsOutputsArrayOutput
	ToApplicationSpecWorkflowStepsOutputsArrayOutputWithContext(context.Context) ApplicationSpecWorkflowStepsOutputsArrayOutput
}

type ApplicationSpecWorkflowStepsOutputsArray []ApplicationSpecWorkflowStepsOutputsInput

func (ApplicationSpecWorkflowStepsOutputsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecWorkflowStepsOutputs)(nil)).Elem()
}

func (i ApplicationSpecWorkflowStepsOutputsArray) ToApplicationSpecWorkflowStepsOutputsArrayOutput() ApplicationSpecWorkflowStepsOutputsArrayOutput {
	return i.ToApplicationSpecWorkflowStepsOutputsArrayOutputWithContext(context.Background())
}

func (i ApplicationSpecWorkflowStepsOutputsArray) ToApplicationSpecWorkflowStepsOutputsArrayOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsOutputsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecWorkflowStepsOutputsArrayOutput)
}

type ApplicationSpecWorkflowStepsOutputsOutput struct{ *pulumi.OutputState }

func (ApplicationSpecWorkflowStepsOutputsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecWorkflowStepsOutputs)(nil)).Elem()
}

func (o ApplicationSpecWorkflowStepsOutputsOutput) ToApplicationSpecWorkflowStepsOutputsOutput() ApplicationSpecWorkflowStepsOutputsOutput {
	return o
}

func (o ApplicationSpecWorkflowStepsOutputsOutput) ToApplicationSpecWorkflowStepsOutputsOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsOutputsOutput {
	return o
}

func (o ApplicationSpecWorkflowStepsOutputsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflowStepsOutputs) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationSpecWorkflowStepsOutputsOutput) ValueFrom() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflowStepsOutputs) string { return v.ValueFrom }).(pulumi.StringOutput)
}

type ApplicationSpecWorkflowStepsOutputsArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSpecWorkflowStepsOutputsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecWorkflowStepsOutputs)(nil)).Elem()
}

func (o ApplicationSpecWorkflowStepsOutputsArrayOutput) ToApplicationSpecWorkflowStepsOutputsArrayOutput() ApplicationSpecWorkflowStepsOutputsArrayOutput {
	return o
}

func (o ApplicationSpecWorkflowStepsOutputsArrayOutput) ToApplicationSpecWorkflowStepsOutputsArrayOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsOutputsArrayOutput {
	return o
}

func (o ApplicationSpecWorkflowStepsOutputsArrayOutput) Index(i pulumi.IntInput) ApplicationSpecWorkflowStepsOutputsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationSpecWorkflowStepsOutputs {
		return vs[0].([]ApplicationSpecWorkflowStepsOutputs)[vs[1].(int)]
	}).(ApplicationSpecWorkflowStepsOutputsOutput)
}

// WorkflowStepBase defines the workflow step base
type ApplicationSpecWorkflowStepsSubsteps struct {
	// DependsOn is the dependency of the step
	DependsOn []string `pulumi:"dependsOn"`
	// If is the if condition of the step
	If *string `pulumi:"if"`
	// Inputs is the inputs of the step
	Inputs []ApplicationSpecWorkflowStepsSubstepsInputs `pulumi:"inputs"`
	// Meta is the meta data of the workflow step.
	Meta *ApplicationSpecWorkflowStepsSubstepsMeta `pulumi:"meta"`
	// Name is the unique name of the workflow step.
	Name *string `pulumi:"name"`
	// Outputs is the outputs of the step
	Outputs []ApplicationSpecWorkflowStepsSubstepsOutputs `pulumi:"outputs"`
	// Properties is the properties of the step
	Properties map[string]interface{} `pulumi:"properties"`
	// Timeout is the timeout of the step
	Timeout *string `pulumi:"timeout"`
	// Type is the type of the workflow step.
	Type string `pulumi:"type"`
}

// ApplicationSpecWorkflowStepsSubstepsInput is an input type that accepts ApplicationSpecWorkflowStepsSubstepsArgs and ApplicationSpecWorkflowStepsSubstepsOutput values.
// You can construct a concrete instance of `ApplicationSpecWorkflowStepsSubstepsInput` via:
//
//	ApplicationSpecWorkflowStepsSubstepsArgs{...}
type ApplicationSpecWorkflowStepsSubstepsInput interface {
	pulumi.Input

	ToApplicationSpecWorkflowStepsSubstepsOutput() ApplicationSpecWorkflowStepsSubstepsOutput
	ToApplicationSpecWorkflowStepsSubstepsOutputWithContext(context.Context) ApplicationSpecWorkflowStepsSubstepsOutput
}

// WorkflowStepBase defines the workflow step base
type ApplicationSpecWorkflowStepsSubstepsArgs struct {
	// DependsOn is the dependency of the step
	DependsOn pulumi.StringArrayInput `pulumi:"dependsOn"`
	// If is the if condition of the step
	If pulumi.StringPtrInput `pulumi:"if"`
	// Inputs is the inputs of the step
	Inputs ApplicationSpecWorkflowStepsSubstepsInputsArrayInput `pulumi:"inputs"`
	// Meta is the meta data of the workflow step.
	Meta ApplicationSpecWorkflowStepsSubstepsMetaPtrInput `pulumi:"meta"`
	// Name is the unique name of the workflow step.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Outputs is the outputs of the step
	Outputs ApplicationSpecWorkflowStepsSubstepsOutputsArrayInput `pulumi:"outputs"`
	// Properties is the properties of the step
	Properties pulumi.MapInput `pulumi:"properties"`
	// Timeout is the timeout of the step
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// Type is the type of the workflow step.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ApplicationSpecWorkflowStepsSubstepsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecWorkflowStepsSubsteps)(nil)).Elem()
}

func (i ApplicationSpecWorkflowStepsSubstepsArgs) ToApplicationSpecWorkflowStepsSubstepsOutput() ApplicationSpecWorkflowStepsSubstepsOutput {
	return i.ToApplicationSpecWorkflowStepsSubstepsOutputWithContext(context.Background())
}

func (i ApplicationSpecWorkflowStepsSubstepsArgs) ToApplicationSpecWorkflowStepsSubstepsOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsSubstepsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecWorkflowStepsSubstepsOutput)
}

// ApplicationSpecWorkflowStepsSubstepsArrayInput is an input type that accepts ApplicationSpecWorkflowStepsSubstepsArray and ApplicationSpecWorkflowStepsSubstepsArrayOutput values.
// You can construct a concrete instance of `ApplicationSpecWorkflowStepsSubstepsArrayInput` via:
//
//	ApplicationSpecWorkflowStepsSubstepsArray{ ApplicationSpecWorkflowStepsSubstepsArgs{...} }
type ApplicationSpecWorkflowStepsSubstepsArrayInput interface {
	pulumi.Input

	ToApplicationSpecWorkflowStepsSubstepsArrayOutput() ApplicationSpecWorkflowStepsSubstepsArrayOutput
	ToApplicationSpecWorkflowStepsSubstepsArrayOutputWithContext(context.Context) ApplicationSpecWorkflowStepsSubstepsArrayOutput
}

type ApplicationSpecWorkflowStepsSubstepsArray []ApplicationSpecWorkflowStepsSubstepsInput

func (ApplicationSpecWorkflowStepsSubstepsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecWorkflowStepsSubsteps)(nil)).Elem()
}

func (i ApplicationSpecWorkflowStepsSubstepsArray) ToApplicationSpecWorkflowStepsSubstepsArrayOutput() ApplicationSpecWorkflowStepsSubstepsArrayOutput {
	return i.ToApplicationSpecWorkflowStepsSubstepsArrayOutputWithContext(context.Background())
}

func (i ApplicationSpecWorkflowStepsSubstepsArray) ToApplicationSpecWorkflowStepsSubstepsArrayOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsSubstepsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecWorkflowStepsSubstepsArrayOutput)
}

// WorkflowStepBase defines the workflow step base
type ApplicationSpecWorkflowStepsSubstepsOutput struct{ *pulumi.OutputState }

func (ApplicationSpecWorkflowStepsSubstepsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecWorkflowStepsSubsteps)(nil)).Elem()
}

func (o ApplicationSpecWorkflowStepsSubstepsOutput) ToApplicationSpecWorkflowStepsSubstepsOutput() ApplicationSpecWorkflowStepsSubstepsOutput {
	return o
}

func (o ApplicationSpecWorkflowStepsSubstepsOutput) ToApplicationSpecWorkflowStepsSubstepsOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsSubstepsOutput {
	return o
}

// DependsOn is the dependency of the step
func (o ApplicationSpecWorkflowStepsSubstepsOutput) DependsOn() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflowStepsSubsteps) []string { return v.DependsOn }).(pulumi.StringArrayOutput)
}

// If is the if condition of the step
func (o ApplicationSpecWorkflowStepsSubstepsOutput) If() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflowStepsSubsteps) *string { return v.If }).(pulumi.StringPtrOutput)
}

// Inputs is the inputs of the step
func (o ApplicationSpecWorkflowStepsSubstepsOutput) Inputs() ApplicationSpecWorkflowStepsSubstepsInputsArrayOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflowStepsSubsteps) []ApplicationSpecWorkflowStepsSubstepsInputs {
		return v.Inputs
	}).(ApplicationSpecWorkflowStepsSubstepsInputsArrayOutput)
}

// Meta is the meta data of the workflow step.
func (o ApplicationSpecWorkflowStepsSubstepsOutput) Meta() ApplicationSpecWorkflowStepsSubstepsMetaPtrOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflowStepsSubsteps) *ApplicationSpecWorkflowStepsSubstepsMeta { return v.Meta }).(ApplicationSpecWorkflowStepsSubstepsMetaPtrOutput)
}

// Name is the unique name of the workflow step.
func (o ApplicationSpecWorkflowStepsSubstepsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflowStepsSubsteps) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Outputs is the outputs of the step
func (o ApplicationSpecWorkflowStepsSubstepsOutput) Outputs() ApplicationSpecWorkflowStepsSubstepsOutputsArrayOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflowStepsSubsteps) []ApplicationSpecWorkflowStepsSubstepsOutputs {
		return v.Outputs
	}).(ApplicationSpecWorkflowStepsSubstepsOutputsArrayOutput)
}

// Properties is the properties of the step
func (o ApplicationSpecWorkflowStepsSubstepsOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflowStepsSubsteps) map[string]interface{} { return v.Properties }).(pulumi.MapOutput)
}

// Timeout is the timeout of the step
func (o ApplicationSpecWorkflowStepsSubstepsOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflowStepsSubsteps) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Type is the type of the workflow step.
func (o ApplicationSpecWorkflowStepsSubstepsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflowStepsSubsteps) string { return v.Type }).(pulumi.StringOutput)
}

type ApplicationSpecWorkflowStepsSubstepsArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSpecWorkflowStepsSubstepsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecWorkflowStepsSubsteps)(nil)).Elem()
}

func (o ApplicationSpecWorkflowStepsSubstepsArrayOutput) ToApplicationSpecWorkflowStepsSubstepsArrayOutput() ApplicationSpecWorkflowStepsSubstepsArrayOutput {
	return o
}

func (o ApplicationSpecWorkflowStepsSubstepsArrayOutput) ToApplicationSpecWorkflowStepsSubstepsArrayOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsSubstepsArrayOutput {
	return o
}

func (o ApplicationSpecWorkflowStepsSubstepsArrayOutput) Index(i pulumi.IntInput) ApplicationSpecWorkflowStepsSubstepsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationSpecWorkflowStepsSubsteps {
		return vs[0].([]ApplicationSpecWorkflowStepsSubsteps)[vs[1].(int)]
	}).(ApplicationSpecWorkflowStepsSubstepsOutput)
}

type ApplicationSpecWorkflowStepsSubstepsInputs struct {
	From         string  `pulumi:"from"`
	ParameterKey *string `pulumi:"parameterKey"`
}

// ApplicationSpecWorkflowStepsSubstepsInputsInput is an input type that accepts ApplicationSpecWorkflowStepsSubstepsInputsArgs and ApplicationSpecWorkflowStepsSubstepsInputsOutput values.
// You can construct a concrete instance of `ApplicationSpecWorkflowStepsSubstepsInputsInput` via:
//
//	ApplicationSpecWorkflowStepsSubstepsInputsArgs{...}
type ApplicationSpecWorkflowStepsSubstepsInputsInput interface {
	pulumi.Input

	ToApplicationSpecWorkflowStepsSubstepsInputsOutput() ApplicationSpecWorkflowStepsSubstepsInputsOutput
	ToApplicationSpecWorkflowStepsSubstepsInputsOutputWithContext(context.Context) ApplicationSpecWorkflowStepsSubstepsInputsOutput
}

type ApplicationSpecWorkflowStepsSubstepsInputsArgs struct {
	From         pulumi.StringInput    `pulumi:"from"`
	ParameterKey pulumi.StringPtrInput `pulumi:"parameterKey"`
}

func (ApplicationSpecWorkflowStepsSubstepsInputsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecWorkflowStepsSubstepsInputs)(nil)).Elem()
}

func (i ApplicationSpecWorkflowStepsSubstepsInputsArgs) ToApplicationSpecWorkflowStepsSubstepsInputsOutput() ApplicationSpecWorkflowStepsSubstepsInputsOutput {
	return i.ToApplicationSpecWorkflowStepsSubstepsInputsOutputWithContext(context.Background())
}

func (i ApplicationSpecWorkflowStepsSubstepsInputsArgs) ToApplicationSpecWorkflowStepsSubstepsInputsOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsSubstepsInputsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecWorkflowStepsSubstepsInputsOutput)
}

// ApplicationSpecWorkflowStepsSubstepsInputsArrayInput is an input type that accepts ApplicationSpecWorkflowStepsSubstepsInputsArray and ApplicationSpecWorkflowStepsSubstepsInputsArrayOutput values.
// You can construct a concrete instance of `ApplicationSpecWorkflowStepsSubstepsInputsArrayInput` via:
//
//	ApplicationSpecWorkflowStepsSubstepsInputsArray{ ApplicationSpecWorkflowStepsSubstepsInputsArgs{...} }
type ApplicationSpecWorkflowStepsSubstepsInputsArrayInput interface {
	pulumi.Input

	ToApplicationSpecWorkflowStepsSubstepsInputsArrayOutput() ApplicationSpecWorkflowStepsSubstepsInputsArrayOutput
	ToApplicationSpecWorkflowStepsSubstepsInputsArrayOutputWithContext(context.Context) ApplicationSpecWorkflowStepsSubstepsInputsArrayOutput
}

type ApplicationSpecWorkflowStepsSubstepsInputsArray []ApplicationSpecWorkflowStepsSubstepsInputsInput

func (ApplicationSpecWorkflowStepsSubstepsInputsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecWorkflowStepsSubstepsInputs)(nil)).Elem()
}

func (i ApplicationSpecWorkflowStepsSubstepsInputsArray) ToApplicationSpecWorkflowStepsSubstepsInputsArrayOutput() ApplicationSpecWorkflowStepsSubstepsInputsArrayOutput {
	return i.ToApplicationSpecWorkflowStepsSubstepsInputsArrayOutputWithContext(context.Background())
}

func (i ApplicationSpecWorkflowStepsSubstepsInputsArray) ToApplicationSpecWorkflowStepsSubstepsInputsArrayOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsSubstepsInputsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecWorkflowStepsSubstepsInputsArrayOutput)
}

type ApplicationSpecWorkflowStepsSubstepsInputsOutput struct{ *pulumi.OutputState }

func (ApplicationSpecWorkflowStepsSubstepsInputsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecWorkflowStepsSubstepsInputs)(nil)).Elem()
}

func (o ApplicationSpecWorkflowStepsSubstepsInputsOutput) ToApplicationSpecWorkflowStepsSubstepsInputsOutput() ApplicationSpecWorkflowStepsSubstepsInputsOutput {
	return o
}

func (o ApplicationSpecWorkflowStepsSubstepsInputsOutput) ToApplicationSpecWorkflowStepsSubstepsInputsOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsSubstepsInputsOutput {
	return o
}

func (o ApplicationSpecWorkflowStepsSubstepsInputsOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflowStepsSubstepsInputs) string { return v.From }).(pulumi.StringOutput)
}

func (o ApplicationSpecWorkflowStepsSubstepsInputsOutput) ParameterKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflowStepsSubstepsInputs) *string { return v.ParameterKey }).(pulumi.StringPtrOutput)
}

type ApplicationSpecWorkflowStepsSubstepsInputsArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSpecWorkflowStepsSubstepsInputsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecWorkflowStepsSubstepsInputs)(nil)).Elem()
}

func (o ApplicationSpecWorkflowStepsSubstepsInputsArrayOutput) ToApplicationSpecWorkflowStepsSubstepsInputsArrayOutput() ApplicationSpecWorkflowStepsSubstepsInputsArrayOutput {
	return o
}

func (o ApplicationSpecWorkflowStepsSubstepsInputsArrayOutput) ToApplicationSpecWorkflowStepsSubstepsInputsArrayOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsSubstepsInputsArrayOutput {
	return o
}

func (o ApplicationSpecWorkflowStepsSubstepsInputsArrayOutput) Index(i pulumi.IntInput) ApplicationSpecWorkflowStepsSubstepsInputsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationSpecWorkflowStepsSubstepsInputs {
		return vs[0].([]ApplicationSpecWorkflowStepsSubstepsInputs)[vs[1].(int)]
	}).(ApplicationSpecWorkflowStepsSubstepsInputsOutput)
}

// Meta is the meta data of the workflow step.
type ApplicationSpecWorkflowStepsSubstepsMeta struct {
	Alias *string `pulumi:"alias"`
}

// ApplicationSpecWorkflowStepsSubstepsMetaInput is an input type that accepts ApplicationSpecWorkflowStepsSubstepsMetaArgs and ApplicationSpecWorkflowStepsSubstepsMetaOutput values.
// You can construct a concrete instance of `ApplicationSpecWorkflowStepsSubstepsMetaInput` via:
//
//	ApplicationSpecWorkflowStepsSubstepsMetaArgs{...}
type ApplicationSpecWorkflowStepsSubstepsMetaInput interface {
	pulumi.Input

	ToApplicationSpecWorkflowStepsSubstepsMetaOutput() ApplicationSpecWorkflowStepsSubstepsMetaOutput
	ToApplicationSpecWorkflowStepsSubstepsMetaOutputWithContext(context.Context) ApplicationSpecWorkflowStepsSubstepsMetaOutput
}

// Meta is the meta data of the workflow step.
type ApplicationSpecWorkflowStepsSubstepsMetaArgs struct {
	Alias pulumi.StringPtrInput `pulumi:"alias"`
}

func (ApplicationSpecWorkflowStepsSubstepsMetaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecWorkflowStepsSubstepsMeta)(nil)).Elem()
}

func (i ApplicationSpecWorkflowStepsSubstepsMetaArgs) ToApplicationSpecWorkflowStepsSubstepsMetaOutput() ApplicationSpecWorkflowStepsSubstepsMetaOutput {
	return i.ToApplicationSpecWorkflowStepsSubstepsMetaOutputWithContext(context.Background())
}

func (i ApplicationSpecWorkflowStepsSubstepsMetaArgs) ToApplicationSpecWorkflowStepsSubstepsMetaOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsSubstepsMetaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecWorkflowStepsSubstepsMetaOutput)
}

func (i ApplicationSpecWorkflowStepsSubstepsMetaArgs) ToApplicationSpecWorkflowStepsSubstepsMetaPtrOutput() ApplicationSpecWorkflowStepsSubstepsMetaPtrOutput {
	return i.ToApplicationSpecWorkflowStepsSubstepsMetaPtrOutputWithContext(context.Background())
}

func (i ApplicationSpecWorkflowStepsSubstepsMetaArgs) ToApplicationSpecWorkflowStepsSubstepsMetaPtrOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsSubstepsMetaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecWorkflowStepsSubstepsMetaOutput).ToApplicationSpecWorkflowStepsSubstepsMetaPtrOutputWithContext(ctx)
}

// ApplicationSpecWorkflowStepsSubstepsMetaPtrInput is an input type that accepts ApplicationSpecWorkflowStepsSubstepsMetaArgs, ApplicationSpecWorkflowStepsSubstepsMetaPtr and ApplicationSpecWorkflowStepsSubstepsMetaPtrOutput values.
// You can construct a concrete instance of `ApplicationSpecWorkflowStepsSubstepsMetaPtrInput` via:
//
//	        ApplicationSpecWorkflowStepsSubstepsMetaArgs{...}
//
//	or:
//
//	        nil
type ApplicationSpecWorkflowStepsSubstepsMetaPtrInput interface {
	pulumi.Input

	ToApplicationSpecWorkflowStepsSubstepsMetaPtrOutput() ApplicationSpecWorkflowStepsSubstepsMetaPtrOutput
	ToApplicationSpecWorkflowStepsSubstepsMetaPtrOutputWithContext(context.Context) ApplicationSpecWorkflowStepsSubstepsMetaPtrOutput
}

type applicationSpecWorkflowStepsSubstepsMetaPtrType ApplicationSpecWorkflowStepsSubstepsMetaArgs

func ApplicationSpecWorkflowStepsSubstepsMetaPtr(v *ApplicationSpecWorkflowStepsSubstepsMetaArgs) ApplicationSpecWorkflowStepsSubstepsMetaPtrInput {
	return (*applicationSpecWorkflowStepsSubstepsMetaPtrType)(v)
}

func (*applicationSpecWorkflowStepsSubstepsMetaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecWorkflowStepsSubstepsMeta)(nil)).Elem()
}

func (i *applicationSpecWorkflowStepsSubstepsMetaPtrType) ToApplicationSpecWorkflowStepsSubstepsMetaPtrOutput() ApplicationSpecWorkflowStepsSubstepsMetaPtrOutput {
	return i.ToApplicationSpecWorkflowStepsSubstepsMetaPtrOutputWithContext(context.Background())
}

func (i *applicationSpecWorkflowStepsSubstepsMetaPtrType) ToApplicationSpecWorkflowStepsSubstepsMetaPtrOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsSubstepsMetaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecWorkflowStepsSubstepsMetaPtrOutput)
}

// Meta is the meta data of the workflow step.
type ApplicationSpecWorkflowStepsSubstepsMetaOutput struct{ *pulumi.OutputState }

func (ApplicationSpecWorkflowStepsSubstepsMetaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecWorkflowStepsSubstepsMeta)(nil)).Elem()
}

func (o ApplicationSpecWorkflowStepsSubstepsMetaOutput) ToApplicationSpecWorkflowStepsSubstepsMetaOutput() ApplicationSpecWorkflowStepsSubstepsMetaOutput {
	return o
}

func (o ApplicationSpecWorkflowStepsSubstepsMetaOutput) ToApplicationSpecWorkflowStepsSubstepsMetaOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsSubstepsMetaOutput {
	return o
}

func (o ApplicationSpecWorkflowStepsSubstepsMetaOutput) ToApplicationSpecWorkflowStepsSubstepsMetaPtrOutput() ApplicationSpecWorkflowStepsSubstepsMetaPtrOutput {
	return o.ToApplicationSpecWorkflowStepsSubstepsMetaPtrOutputWithContext(context.Background())
}

func (o ApplicationSpecWorkflowStepsSubstepsMetaOutput) ToApplicationSpecWorkflowStepsSubstepsMetaPtrOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsSubstepsMetaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationSpecWorkflowStepsSubstepsMeta) *ApplicationSpecWorkflowStepsSubstepsMeta {
		return &v
	}).(ApplicationSpecWorkflowStepsSubstepsMetaPtrOutput)
}

func (o ApplicationSpecWorkflowStepsSubstepsMetaOutput) Alias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflowStepsSubstepsMeta) *string { return v.Alias }).(pulumi.StringPtrOutput)
}

type ApplicationSpecWorkflowStepsSubstepsMetaPtrOutput struct{ *pulumi.OutputState }

func (ApplicationSpecWorkflowStepsSubstepsMetaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSpecWorkflowStepsSubstepsMeta)(nil)).Elem()
}

func (o ApplicationSpecWorkflowStepsSubstepsMetaPtrOutput) ToApplicationSpecWorkflowStepsSubstepsMetaPtrOutput() ApplicationSpecWorkflowStepsSubstepsMetaPtrOutput {
	return o
}

func (o ApplicationSpecWorkflowStepsSubstepsMetaPtrOutput) ToApplicationSpecWorkflowStepsSubstepsMetaPtrOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsSubstepsMetaPtrOutput {
	return o
}

func (o ApplicationSpecWorkflowStepsSubstepsMetaPtrOutput) Elem() ApplicationSpecWorkflowStepsSubstepsMetaOutput {
	return o.ApplyT(func(v *ApplicationSpecWorkflowStepsSubstepsMeta) ApplicationSpecWorkflowStepsSubstepsMeta {
		if v != nil {
			return *v
		}
		var ret ApplicationSpecWorkflowStepsSubstepsMeta
		return ret
	}).(ApplicationSpecWorkflowStepsSubstepsMetaOutput)
}

func (o ApplicationSpecWorkflowStepsSubstepsMetaPtrOutput) Alias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSpecWorkflowStepsSubstepsMeta) *string {
		if v == nil {
			return nil
		}
		return v.Alias
	}).(pulumi.StringPtrOutput)
}

type ApplicationSpecWorkflowStepsSubstepsOutputs struct {
	Name      string `pulumi:"name"`
	ValueFrom string `pulumi:"valueFrom"`
}

// ApplicationSpecWorkflowStepsSubstepsOutputsInput is an input type that accepts ApplicationSpecWorkflowStepsSubstepsOutputsArgs and ApplicationSpecWorkflowStepsSubstepsOutputsOutput values.
// You can construct a concrete instance of `ApplicationSpecWorkflowStepsSubstepsOutputsInput` via:
//
//	ApplicationSpecWorkflowStepsSubstepsOutputsArgs{...}
type ApplicationSpecWorkflowStepsSubstepsOutputsInput interface {
	pulumi.Input

	ToApplicationSpecWorkflowStepsSubstepsOutputsOutput() ApplicationSpecWorkflowStepsSubstepsOutputsOutput
	ToApplicationSpecWorkflowStepsSubstepsOutputsOutputWithContext(context.Context) ApplicationSpecWorkflowStepsSubstepsOutputsOutput
}

type ApplicationSpecWorkflowStepsSubstepsOutputsArgs struct {
	Name      pulumi.StringInput `pulumi:"name"`
	ValueFrom pulumi.StringInput `pulumi:"valueFrom"`
}

func (ApplicationSpecWorkflowStepsSubstepsOutputsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecWorkflowStepsSubstepsOutputs)(nil)).Elem()
}

func (i ApplicationSpecWorkflowStepsSubstepsOutputsArgs) ToApplicationSpecWorkflowStepsSubstepsOutputsOutput() ApplicationSpecWorkflowStepsSubstepsOutputsOutput {
	return i.ToApplicationSpecWorkflowStepsSubstepsOutputsOutputWithContext(context.Background())
}

func (i ApplicationSpecWorkflowStepsSubstepsOutputsArgs) ToApplicationSpecWorkflowStepsSubstepsOutputsOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsSubstepsOutputsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecWorkflowStepsSubstepsOutputsOutput)
}

// ApplicationSpecWorkflowStepsSubstepsOutputsArrayInput is an input type that accepts ApplicationSpecWorkflowStepsSubstepsOutputsArray and ApplicationSpecWorkflowStepsSubstepsOutputsArrayOutput values.
// You can construct a concrete instance of `ApplicationSpecWorkflowStepsSubstepsOutputsArrayInput` via:
//
//	ApplicationSpecWorkflowStepsSubstepsOutputsArray{ ApplicationSpecWorkflowStepsSubstepsOutputsArgs{...} }
type ApplicationSpecWorkflowStepsSubstepsOutputsArrayInput interface {
	pulumi.Input

	ToApplicationSpecWorkflowStepsSubstepsOutputsArrayOutput() ApplicationSpecWorkflowStepsSubstepsOutputsArrayOutput
	ToApplicationSpecWorkflowStepsSubstepsOutputsArrayOutputWithContext(context.Context) ApplicationSpecWorkflowStepsSubstepsOutputsArrayOutput
}

type ApplicationSpecWorkflowStepsSubstepsOutputsArray []ApplicationSpecWorkflowStepsSubstepsOutputsInput

func (ApplicationSpecWorkflowStepsSubstepsOutputsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecWorkflowStepsSubstepsOutputs)(nil)).Elem()
}

func (i ApplicationSpecWorkflowStepsSubstepsOutputsArray) ToApplicationSpecWorkflowStepsSubstepsOutputsArrayOutput() ApplicationSpecWorkflowStepsSubstepsOutputsArrayOutput {
	return i.ToApplicationSpecWorkflowStepsSubstepsOutputsArrayOutputWithContext(context.Background())
}

func (i ApplicationSpecWorkflowStepsSubstepsOutputsArray) ToApplicationSpecWorkflowStepsSubstepsOutputsArrayOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsSubstepsOutputsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSpecWorkflowStepsSubstepsOutputsArrayOutput)
}

type ApplicationSpecWorkflowStepsSubstepsOutputsOutput struct{ *pulumi.OutputState }

func (ApplicationSpecWorkflowStepsSubstepsOutputsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSpecWorkflowStepsSubstepsOutputs)(nil)).Elem()
}

func (o ApplicationSpecWorkflowStepsSubstepsOutputsOutput) ToApplicationSpecWorkflowStepsSubstepsOutputsOutput() ApplicationSpecWorkflowStepsSubstepsOutputsOutput {
	return o
}

func (o ApplicationSpecWorkflowStepsSubstepsOutputsOutput) ToApplicationSpecWorkflowStepsSubstepsOutputsOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsSubstepsOutputsOutput {
	return o
}

func (o ApplicationSpecWorkflowStepsSubstepsOutputsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflowStepsSubstepsOutputs) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationSpecWorkflowStepsSubstepsOutputsOutput) ValueFrom() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationSpecWorkflowStepsSubstepsOutputs) string { return v.ValueFrom }).(pulumi.StringOutput)
}

type ApplicationSpecWorkflowStepsSubstepsOutputsArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSpecWorkflowStepsSubstepsOutputsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationSpecWorkflowStepsSubstepsOutputs)(nil)).Elem()
}

func (o ApplicationSpecWorkflowStepsSubstepsOutputsArrayOutput) ToApplicationSpecWorkflowStepsSubstepsOutputsArrayOutput() ApplicationSpecWorkflowStepsSubstepsOutputsArrayOutput {
	return o
}

func (o ApplicationSpecWorkflowStepsSubstepsOutputsArrayOutput) ToApplicationSpecWorkflowStepsSubstepsOutputsArrayOutputWithContext(ctx context.Context) ApplicationSpecWorkflowStepsSubstepsOutputsArrayOutput {
	return o
}

func (o ApplicationSpecWorkflowStepsSubstepsOutputsArrayOutput) Index(i pulumi.IntInput) ApplicationSpecWorkflowStepsSubstepsOutputsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationSpecWorkflowStepsSubstepsOutputs {
		return vs[0].([]ApplicationSpecWorkflowStepsSubstepsOutputs)[vs[1].(int)]
	}).(ApplicationSpecWorkflowStepsSubstepsOutputsOutput)
}

// AppStatus defines the observed state of Application
type ApplicationStatus struct {
	// AppliedResources record the resources that the  workflow step apply.
	AppliedResources []ApplicationStatusAppliedresources `pulumi:"appliedResources"`
	// Components record the related Components created by Application Controller
	Components []ApplicationStatusComponents `pulumi:"components"`
	// Conditions of the resource.
	Conditions []ApplicationStatusConditions `pulumi:"conditions"`
	// LatestRevision of the application configuration it generates
	LatestRevision *ApplicationStatusLatestrevision `pulumi:"latestRevision"`
	// The generation observed by the application controller.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// PolicyStatus records the status of policy Deprecated This field is only used by EnvBinding Policy which is deprecated.
	Policy []ApplicationStatusPolicy `pulumi:"policy"`
	// Services record the status of the application services
	Services []ApplicationStatusServices `pulumi:"services"`
	// ApplicationPhase is a label for the condition of an application at the current time
	Status *string `pulumi:"status"`
	// Workflow record the status of workflow
	Workflow *ApplicationStatusWorkflow `pulumi:"workflow"`
}

// ApplicationStatusInput is an input type that accepts ApplicationStatusArgs and ApplicationStatusOutput values.
// You can construct a concrete instance of `ApplicationStatusInput` via:
//
//	ApplicationStatusArgs{...}
type ApplicationStatusInput interface {
	pulumi.Input

	ToApplicationStatusOutput() ApplicationStatusOutput
	ToApplicationStatusOutputWithContext(context.Context) ApplicationStatusOutput
}

// AppStatus defines the observed state of Application
type ApplicationStatusArgs struct {
	// AppliedResources record the resources that the  workflow step apply.
	AppliedResources ApplicationStatusAppliedresourcesArrayInput `pulumi:"appliedResources"`
	// Components record the related Components created by Application Controller
	Components ApplicationStatusComponentsArrayInput `pulumi:"components"`
	// Conditions of the resource.
	Conditions ApplicationStatusConditionsArrayInput `pulumi:"conditions"`
	// LatestRevision of the application configuration it generates
	LatestRevision ApplicationStatusLatestrevisionPtrInput `pulumi:"latestRevision"`
	// The generation observed by the application controller.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// PolicyStatus records the status of policy Deprecated This field is only used by EnvBinding Policy which is deprecated.
	Policy ApplicationStatusPolicyArrayInput `pulumi:"policy"`
	// Services record the status of the application services
	Services ApplicationStatusServicesArrayInput `pulumi:"services"`
	// ApplicationPhase is a label for the condition of an application at the current time
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Workflow record the status of workflow
	Workflow ApplicationStatusWorkflowPtrInput `pulumi:"workflow"`
}

func (ApplicationStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatus)(nil)).Elem()
}

func (i ApplicationStatusArgs) ToApplicationStatusOutput() ApplicationStatusOutput {
	return i.ToApplicationStatusOutputWithContext(context.Background())
}

func (i ApplicationStatusArgs) ToApplicationStatusOutputWithContext(ctx context.Context) ApplicationStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOutput)
}

func (i ApplicationStatusArgs) ToApplicationStatusPtrOutput() ApplicationStatusPtrOutput {
	return i.ToApplicationStatusPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusArgs) ToApplicationStatusPtrOutputWithContext(ctx context.Context) ApplicationStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusOutput).ToApplicationStatusPtrOutputWithContext(ctx)
}

// ApplicationStatusPtrInput is an input type that accepts ApplicationStatusArgs, ApplicationStatusPtr and ApplicationStatusPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusPtrInput` via:
//
//	        ApplicationStatusArgs{...}
//
//	or:
//
//	        nil
type ApplicationStatusPtrInput interface {
	pulumi.Input

	ToApplicationStatusPtrOutput() ApplicationStatusPtrOutput
	ToApplicationStatusPtrOutputWithContext(context.Context) ApplicationStatusPtrOutput
}

type applicationStatusPtrType ApplicationStatusArgs

func ApplicationStatusPtr(v *ApplicationStatusArgs) ApplicationStatusPtrInput {
	return (*applicationStatusPtrType)(v)
}

func (*applicationStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatus)(nil)).Elem()
}

func (i *applicationStatusPtrType) ToApplicationStatusPtrOutput() ApplicationStatusPtrOutput {
	return i.ToApplicationStatusPtrOutputWithContext(context.Background())
}

func (i *applicationStatusPtrType) ToApplicationStatusPtrOutputWithContext(ctx context.Context) ApplicationStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusPtrOutput)
}

// AppStatus defines the observed state of Application
type ApplicationStatusOutput struct{ *pulumi.OutputState }

func (ApplicationStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatus)(nil)).Elem()
}

func (o ApplicationStatusOutput) ToApplicationStatusOutput() ApplicationStatusOutput {
	return o
}

func (o ApplicationStatusOutput) ToApplicationStatusOutputWithContext(ctx context.Context) ApplicationStatusOutput {
	return o
}

func (o ApplicationStatusOutput) ToApplicationStatusPtrOutput() ApplicationStatusPtrOutput {
	return o.ToApplicationStatusPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusOutput) ToApplicationStatusPtrOutputWithContext(ctx context.Context) ApplicationStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationStatus) *ApplicationStatus {
		return &v
	}).(ApplicationStatusPtrOutput)
}

// AppliedResources record the resources that the  workflow step apply.
func (o ApplicationStatusOutput) AppliedResources() ApplicationStatusAppliedresourcesArrayOutput {
	return o.ApplyT(func(v ApplicationStatus) []ApplicationStatusAppliedresources { return v.AppliedResources }).(ApplicationStatusAppliedresourcesArrayOutput)
}

// Components record the related Components created by Application Controller
func (o ApplicationStatusOutput) Components() ApplicationStatusComponentsArrayOutput {
	return o.ApplyT(func(v ApplicationStatus) []ApplicationStatusComponents { return v.Components }).(ApplicationStatusComponentsArrayOutput)
}

// Conditions of the resource.
func (o ApplicationStatusOutput) Conditions() ApplicationStatusConditionsArrayOutput {
	return o.ApplyT(func(v ApplicationStatus) []ApplicationStatusConditions { return v.Conditions }).(ApplicationStatusConditionsArrayOutput)
}

// LatestRevision of the application configuration it generates
func (o ApplicationStatusOutput) LatestRevision() ApplicationStatusLatestrevisionPtrOutput {
	return o.ApplyT(func(v ApplicationStatus) *ApplicationStatusLatestrevision { return v.LatestRevision }).(ApplicationStatusLatestrevisionPtrOutput)
}

// The generation observed by the application controller.
func (o ApplicationStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// PolicyStatus records the status of policy Deprecated This field is only used by EnvBinding Policy which is deprecated.
func (o ApplicationStatusOutput) Policy() ApplicationStatusPolicyArrayOutput {
	return o.ApplyT(func(v ApplicationStatus) []ApplicationStatusPolicy { return v.Policy }).(ApplicationStatusPolicyArrayOutput)
}

// Services record the status of the application services
func (o ApplicationStatusOutput) Services() ApplicationStatusServicesArrayOutput {
	return o.ApplyT(func(v ApplicationStatus) []ApplicationStatusServices { return v.Services }).(ApplicationStatusServicesArrayOutput)
}

// ApplicationPhase is a label for the condition of an application at the current time
func (o ApplicationStatusOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatus) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Workflow record the status of workflow
func (o ApplicationStatusOutput) Workflow() ApplicationStatusWorkflowPtrOutput {
	return o.ApplyT(func(v ApplicationStatus) *ApplicationStatusWorkflow { return v.Workflow }).(ApplicationStatusWorkflowPtrOutput)
}

type ApplicationStatusPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatus)(nil)).Elem()
}

func (o ApplicationStatusPtrOutput) ToApplicationStatusPtrOutput() ApplicationStatusPtrOutput {
	return o
}

func (o ApplicationStatusPtrOutput) ToApplicationStatusPtrOutputWithContext(ctx context.Context) ApplicationStatusPtrOutput {
	return o
}

func (o ApplicationStatusPtrOutput) Elem() ApplicationStatusOutput {
	return o.ApplyT(func(v *ApplicationStatus) ApplicationStatus {
		if v != nil {
			return *v
		}
		var ret ApplicationStatus
		return ret
	}).(ApplicationStatusOutput)
}

// AppliedResources record the resources that the  workflow step apply.
func (o ApplicationStatusPtrOutput) AppliedResources() ApplicationStatusAppliedresourcesArrayOutput {
	return o.ApplyT(func(v *ApplicationStatus) []ApplicationStatusAppliedresources {
		if v == nil {
			return nil
		}
		return v.AppliedResources
	}).(ApplicationStatusAppliedresourcesArrayOutput)
}

// Components record the related Components created by Application Controller
func (o ApplicationStatusPtrOutput) Components() ApplicationStatusComponentsArrayOutput {
	return o.ApplyT(func(v *ApplicationStatus) []ApplicationStatusComponents {
		if v == nil {
			return nil
		}
		return v.Components
	}).(ApplicationStatusComponentsArrayOutput)
}

// Conditions of the resource.
func (o ApplicationStatusPtrOutput) Conditions() ApplicationStatusConditionsArrayOutput {
	return o.ApplyT(func(v *ApplicationStatus) []ApplicationStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(ApplicationStatusConditionsArrayOutput)
}

// LatestRevision of the application configuration it generates
func (o ApplicationStatusPtrOutput) LatestRevision() ApplicationStatusLatestrevisionPtrOutput {
	return o.ApplyT(func(v *ApplicationStatus) *ApplicationStatusLatestrevision {
		if v == nil {
			return nil
		}
		return v.LatestRevision
	}).(ApplicationStatusLatestrevisionPtrOutput)
}

// The generation observed by the application controller.
func (o ApplicationStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// PolicyStatus records the status of policy Deprecated This field is only used by EnvBinding Policy which is deprecated.
func (o ApplicationStatusPtrOutput) Policy() ApplicationStatusPolicyArrayOutput {
	return o.ApplyT(func(v *ApplicationStatus) []ApplicationStatusPolicy {
		if v == nil {
			return nil
		}
		return v.Policy
	}).(ApplicationStatusPolicyArrayOutput)
}

// Services record the status of the application services
func (o ApplicationStatusPtrOutput) Services() ApplicationStatusServicesArrayOutput {
	return o.ApplyT(func(v *ApplicationStatus) []ApplicationStatusServices {
		if v == nil {
			return nil
		}
		return v.Services
	}).(ApplicationStatusServicesArrayOutput)
}

// ApplicationPhase is a label for the condition of an application at the current time
func (o ApplicationStatusPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatus) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Workflow record the status of workflow
func (o ApplicationStatusPtrOutput) Workflow() ApplicationStatusWorkflowPtrOutput {
	return o.ApplyT(func(v *ApplicationStatus) *ApplicationStatusWorkflow {
		if v == nil {
			return nil
		}
		return v.Workflow
	}).(ApplicationStatusWorkflowPtrOutput)
}

// ClusterObjectReference defines the object reference with cluster.
type ApplicationStatusAppliedresources struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	Cluster    *string `pulumi:"cluster"`
	Creator    *string `pulumi:"creator"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// ApplicationStatusAppliedresourcesInput is an input type that accepts ApplicationStatusAppliedresourcesArgs and ApplicationStatusAppliedresourcesOutput values.
// You can construct a concrete instance of `ApplicationStatusAppliedresourcesInput` via:
//
//	ApplicationStatusAppliedresourcesArgs{...}
type ApplicationStatusAppliedresourcesInput interface {
	pulumi.Input

	ToApplicationStatusAppliedresourcesOutput() ApplicationStatusAppliedresourcesOutput
	ToApplicationStatusAppliedresourcesOutputWithContext(context.Context) ApplicationStatusAppliedresourcesOutput
}

// ClusterObjectReference defines the object reference with cluster.
type ApplicationStatusAppliedresourcesArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	Cluster    pulumi.StringPtrInput `pulumi:"cluster"`
	Creator    pulumi.StringPtrInput `pulumi:"creator"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ApplicationStatusAppliedresourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusAppliedresources)(nil)).Elem()
}

func (i ApplicationStatusAppliedresourcesArgs) ToApplicationStatusAppliedresourcesOutput() ApplicationStatusAppliedresourcesOutput {
	return i.ToApplicationStatusAppliedresourcesOutputWithContext(context.Background())
}

func (i ApplicationStatusAppliedresourcesArgs) ToApplicationStatusAppliedresourcesOutputWithContext(ctx context.Context) ApplicationStatusAppliedresourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusAppliedresourcesOutput)
}

// ApplicationStatusAppliedresourcesArrayInput is an input type that accepts ApplicationStatusAppliedresourcesArray and ApplicationStatusAppliedresourcesArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusAppliedresourcesArrayInput` via:
//
//	ApplicationStatusAppliedresourcesArray{ ApplicationStatusAppliedresourcesArgs{...} }
type ApplicationStatusAppliedresourcesArrayInput interface {
	pulumi.Input

	ToApplicationStatusAppliedresourcesArrayOutput() ApplicationStatusAppliedresourcesArrayOutput
	ToApplicationStatusAppliedresourcesArrayOutputWithContext(context.Context) ApplicationStatusAppliedresourcesArrayOutput
}

type ApplicationStatusAppliedresourcesArray []ApplicationStatusAppliedresourcesInput

func (ApplicationStatusAppliedresourcesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusAppliedresources)(nil)).Elem()
}

func (i ApplicationStatusAppliedresourcesArray) ToApplicationStatusAppliedresourcesArrayOutput() ApplicationStatusAppliedresourcesArrayOutput {
	return i.ToApplicationStatusAppliedresourcesArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusAppliedresourcesArray) ToApplicationStatusAppliedresourcesArrayOutputWithContext(ctx context.Context) ApplicationStatusAppliedresourcesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusAppliedresourcesArrayOutput)
}

// ClusterObjectReference defines the object reference with cluster.
type ApplicationStatusAppliedresourcesOutput struct{ *pulumi.OutputState }

func (ApplicationStatusAppliedresourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusAppliedresources)(nil)).Elem()
}

func (o ApplicationStatusAppliedresourcesOutput) ToApplicationStatusAppliedresourcesOutput() ApplicationStatusAppliedresourcesOutput {
	return o
}

func (o ApplicationStatusAppliedresourcesOutput) ToApplicationStatusAppliedresourcesOutputWithContext(ctx context.Context) ApplicationStatusAppliedresourcesOutput {
	return o
}

// API version of the referent.
func (o ApplicationStatusAppliedresourcesOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusAppliedresources) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusAppliedresourcesOutput) Cluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusAppliedresources) *string { return v.Cluster }).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusAppliedresourcesOutput) Creator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusAppliedresources) *string { return v.Creator }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o ApplicationStatusAppliedresourcesOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusAppliedresources) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ApplicationStatusAppliedresourcesOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusAppliedresources) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ApplicationStatusAppliedresourcesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusAppliedresources) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o ApplicationStatusAppliedresourcesOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusAppliedresources) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ApplicationStatusAppliedresourcesOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusAppliedresources) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o ApplicationStatusAppliedresourcesOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusAppliedresources) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ApplicationStatusAppliedresourcesArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusAppliedresourcesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusAppliedresources)(nil)).Elem()
}

func (o ApplicationStatusAppliedresourcesArrayOutput) ToApplicationStatusAppliedresourcesArrayOutput() ApplicationStatusAppliedresourcesArrayOutput {
	return o
}

func (o ApplicationStatusAppliedresourcesArrayOutput) ToApplicationStatusAppliedresourcesArrayOutputWithContext(ctx context.Context) ApplicationStatusAppliedresourcesArrayOutput {
	return o
}

func (o ApplicationStatusAppliedresourcesArrayOutput) Index(i pulumi.IntInput) ApplicationStatusAppliedresourcesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusAppliedresources {
		return vs[0].([]ApplicationStatusAppliedresources)[vs[1].(int)]
	}).(ApplicationStatusAppliedresourcesOutput)
}

// ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.
//
//	Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
type ApplicationStatusComponents struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// ApplicationStatusComponentsInput is an input type that accepts ApplicationStatusComponentsArgs and ApplicationStatusComponentsOutput values.
// You can construct a concrete instance of `ApplicationStatusComponentsInput` via:
//
//	ApplicationStatusComponentsArgs{...}
type ApplicationStatusComponentsInput interface {
	pulumi.Input

	ToApplicationStatusComponentsOutput() ApplicationStatusComponentsOutput
	ToApplicationStatusComponentsOutputWithContext(context.Context) ApplicationStatusComponentsOutput
}

// ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.
//
//	Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
type ApplicationStatusComponentsArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ApplicationStatusComponentsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusComponents)(nil)).Elem()
}

func (i ApplicationStatusComponentsArgs) ToApplicationStatusComponentsOutput() ApplicationStatusComponentsOutput {
	return i.ToApplicationStatusComponentsOutputWithContext(context.Background())
}

func (i ApplicationStatusComponentsArgs) ToApplicationStatusComponentsOutputWithContext(ctx context.Context) ApplicationStatusComponentsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusComponentsOutput)
}

// ApplicationStatusComponentsArrayInput is an input type that accepts ApplicationStatusComponentsArray and ApplicationStatusComponentsArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusComponentsArrayInput` via:
//
//	ApplicationStatusComponentsArray{ ApplicationStatusComponentsArgs{...} }
type ApplicationStatusComponentsArrayInput interface {
	pulumi.Input

	ToApplicationStatusComponentsArrayOutput() ApplicationStatusComponentsArrayOutput
	ToApplicationStatusComponentsArrayOutputWithContext(context.Context) ApplicationStatusComponentsArrayOutput
}

type ApplicationStatusComponentsArray []ApplicationStatusComponentsInput

func (ApplicationStatusComponentsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusComponents)(nil)).Elem()
}

func (i ApplicationStatusComponentsArray) ToApplicationStatusComponentsArrayOutput() ApplicationStatusComponentsArrayOutput {
	return i.ToApplicationStatusComponentsArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusComponentsArray) ToApplicationStatusComponentsArrayOutputWithContext(ctx context.Context) ApplicationStatusComponentsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusComponentsArrayOutput)
}

// ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.
//
//	Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
type ApplicationStatusComponentsOutput struct{ *pulumi.OutputState }

func (ApplicationStatusComponentsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusComponents)(nil)).Elem()
}

func (o ApplicationStatusComponentsOutput) ToApplicationStatusComponentsOutput() ApplicationStatusComponentsOutput {
	return o
}

func (o ApplicationStatusComponentsOutput) ToApplicationStatusComponentsOutputWithContext(ctx context.Context) ApplicationStatusComponentsOutput {
	return o
}

// API version of the referent.
func (o ApplicationStatusComponentsOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusComponents) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o ApplicationStatusComponentsOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusComponents) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ApplicationStatusComponentsOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusComponents) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ApplicationStatusComponentsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusComponents) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o ApplicationStatusComponentsOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusComponents) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ApplicationStatusComponentsOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusComponents) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o ApplicationStatusComponentsOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusComponents) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ApplicationStatusComponentsArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusComponentsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusComponents)(nil)).Elem()
}

func (o ApplicationStatusComponentsArrayOutput) ToApplicationStatusComponentsArrayOutput() ApplicationStatusComponentsArrayOutput {
	return o
}

func (o ApplicationStatusComponentsArrayOutput) ToApplicationStatusComponentsArrayOutputWithContext(ctx context.Context) ApplicationStatusComponentsArrayOutput {
	return o
}

func (o ApplicationStatusComponentsArrayOutput) Index(i pulumi.IntInput) ApplicationStatusComponentsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusComponents {
		return vs[0].([]ApplicationStatusComponents)[vs[1].(int)]
	}).(ApplicationStatusComponentsOutput)
}

// A Condition that may apply to a resource.
type ApplicationStatusConditions struct {
	// LastTransitionTime is the last time this condition transitioned from one status to another.
	LastTransitionTime string `pulumi:"lastTransitionTime"`
	// A Message containing details about this condition's last transition from one status to another, if any.
	Message *string `pulumi:"message"`
	// A Reason for this condition's last transition from one status to another.
	Reason string `pulumi:"reason"`
	// Status of this condition; is it currently True, False, or Unknown?
	Status string `pulumi:"status"`
	// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
	Type string `pulumi:"type"`
}

// ApplicationStatusConditionsInput is an input type that accepts ApplicationStatusConditionsArgs and ApplicationStatusConditionsOutput values.
// You can construct a concrete instance of `ApplicationStatusConditionsInput` via:
//
//	ApplicationStatusConditionsArgs{...}
type ApplicationStatusConditionsInput interface {
	pulumi.Input

	ToApplicationStatusConditionsOutput() ApplicationStatusConditionsOutput
	ToApplicationStatusConditionsOutputWithContext(context.Context) ApplicationStatusConditionsOutput
}

// A Condition that may apply to a resource.
type ApplicationStatusConditionsArgs struct {
	// LastTransitionTime is the last time this condition transitioned from one status to another.
	LastTransitionTime pulumi.StringInput `pulumi:"lastTransitionTime"`
	// A Message containing details about this condition's last transition from one status to another, if any.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// A Reason for this condition's last transition from one status to another.
	Reason pulumi.StringInput `pulumi:"reason"`
	// Status of this condition; is it currently True, False, or Unknown?
	Status pulumi.StringInput `pulumi:"status"`
	// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ApplicationStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusConditions)(nil)).Elem()
}

func (i ApplicationStatusConditionsArgs) ToApplicationStatusConditionsOutput() ApplicationStatusConditionsOutput {
	return i.ToApplicationStatusConditionsOutputWithContext(context.Background())
}

func (i ApplicationStatusConditionsArgs) ToApplicationStatusConditionsOutputWithContext(ctx context.Context) ApplicationStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusConditionsOutput)
}

// ApplicationStatusConditionsArrayInput is an input type that accepts ApplicationStatusConditionsArray and ApplicationStatusConditionsArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusConditionsArrayInput` via:
//
//	ApplicationStatusConditionsArray{ ApplicationStatusConditionsArgs{...} }
type ApplicationStatusConditionsArrayInput interface {
	pulumi.Input

	ToApplicationStatusConditionsArrayOutput() ApplicationStatusConditionsArrayOutput
	ToApplicationStatusConditionsArrayOutputWithContext(context.Context) ApplicationStatusConditionsArrayOutput
}

type ApplicationStatusConditionsArray []ApplicationStatusConditionsInput

func (ApplicationStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusConditions)(nil)).Elem()
}

func (i ApplicationStatusConditionsArray) ToApplicationStatusConditionsArrayOutput() ApplicationStatusConditionsArrayOutput {
	return i.ToApplicationStatusConditionsArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusConditionsArray) ToApplicationStatusConditionsArrayOutputWithContext(ctx context.Context) ApplicationStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusConditionsArrayOutput)
}

// A Condition that may apply to a resource.
type ApplicationStatusConditionsOutput struct{ *pulumi.OutputState }

func (ApplicationStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusConditions)(nil)).Elem()
}

func (o ApplicationStatusConditionsOutput) ToApplicationStatusConditionsOutput() ApplicationStatusConditionsOutput {
	return o
}

func (o ApplicationStatusConditionsOutput) ToApplicationStatusConditionsOutputWithContext(ctx context.Context) ApplicationStatusConditionsOutput {
	return o
}

// LastTransitionTime is the last time this condition transitioned from one status to another.
func (o ApplicationStatusConditionsOutput) LastTransitionTime() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusConditions) string { return v.LastTransitionTime }).(pulumi.StringOutput)
}

// A Message containing details about this condition's last transition from one status to another, if any.
func (o ApplicationStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// A Reason for this condition's last transition from one status to another.
func (o ApplicationStatusConditionsOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusConditions) string { return v.Reason }).(pulumi.StringOutput)
}

// Status of this condition; is it currently True, False, or Unknown?
func (o ApplicationStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type of this condition. At most one of each condition type may apply to a resource at any point in time.
func (o ApplicationStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type ApplicationStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusConditions)(nil)).Elem()
}

func (o ApplicationStatusConditionsArrayOutput) ToApplicationStatusConditionsArrayOutput() ApplicationStatusConditionsArrayOutput {
	return o
}

func (o ApplicationStatusConditionsArrayOutput) ToApplicationStatusConditionsArrayOutputWithContext(ctx context.Context) ApplicationStatusConditionsArrayOutput {
	return o
}

func (o ApplicationStatusConditionsArrayOutput) Index(i pulumi.IntInput) ApplicationStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusConditions {
		return vs[0].([]ApplicationStatusConditions)[vs[1].(int)]
	}).(ApplicationStatusConditionsOutput)
}

// LatestRevision of the application configuration it generates
type ApplicationStatusLatestrevision struct {
	Name     string `pulumi:"name"`
	Revision int    `pulumi:"revision"`
	// RevisionHash record the hash value of the spec of ApplicationRevision object.
	RevisionHash *string `pulumi:"revisionHash"`
}

// ApplicationStatusLatestrevisionInput is an input type that accepts ApplicationStatusLatestrevisionArgs and ApplicationStatusLatestrevisionOutput values.
// You can construct a concrete instance of `ApplicationStatusLatestrevisionInput` via:
//
//	ApplicationStatusLatestrevisionArgs{...}
type ApplicationStatusLatestrevisionInput interface {
	pulumi.Input

	ToApplicationStatusLatestrevisionOutput() ApplicationStatusLatestrevisionOutput
	ToApplicationStatusLatestrevisionOutputWithContext(context.Context) ApplicationStatusLatestrevisionOutput
}

// LatestRevision of the application configuration it generates
type ApplicationStatusLatestrevisionArgs struct {
	Name     pulumi.StringInput `pulumi:"name"`
	Revision pulumi.IntInput    `pulumi:"revision"`
	// RevisionHash record the hash value of the spec of ApplicationRevision object.
	RevisionHash pulumi.StringPtrInput `pulumi:"revisionHash"`
}

func (ApplicationStatusLatestrevisionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusLatestrevision)(nil)).Elem()
}

func (i ApplicationStatusLatestrevisionArgs) ToApplicationStatusLatestrevisionOutput() ApplicationStatusLatestrevisionOutput {
	return i.ToApplicationStatusLatestrevisionOutputWithContext(context.Background())
}

func (i ApplicationStatusLatestrevisionArgs) ToApplicationStatusLatestrevisionOutputWithContext(ctx context.Context) ApplicationStatusLatestrevisionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusLatestrevisionOutput)
}

func (i ApplicationStatusLatestrevisionArgs) ToApplicationStatusLatestrevisionPtrOutput() ApplicationStatusLatestrevisionPtrOutput {
	return i.ToApplicationStatusLatestrevisionPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusLatestrevisionArgs) ToApplicationStatusLatestrevisionPtrOutputWithContext(ctx context.Context) ApplicationStatusLatestrevisionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusLatestrevisionOutput).ToApplicationStatusLatestrevisionPtrOutputWithContext(ctx)
}

// ApplicationStatusLatestrevisionPtrInput is an input type that accepts ApplicationStatusLatestrevisionArgs, ApplicationStatusLatestrevisionPtr and ApplicationStatusLatestrevisionPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusLatestrevisionPtrInput` via:
//
//	        ApplicationStatusLatestrevisionArgs{...}
//
//	or:
//
//	        nil
type ApplicationStatusLatestrevisionPtrInput interface {
	pulumi.Input

	ToApplicationStatusLatestrevisionPtrOutput() ApplicationStatusLatestrevisionPtrOutput
	ToApplicationStatusLatestrevisionPtrOutputWithContext(context.Context) ApplicationStatusLatestrevisionPtrOutput
}

type applicationStatusLatestrevisionPtrType ApplicationStatusLatestrevisionArgs

func ApplicationStatusLatestrevisionPtr(v *ApplicationStatusLatestrevisionArgs) ApplicationStatusLatestrevisionPtrInput {
	return (*applicationStatusLatestrevisionPtrType)(v)
}

func (*applicationStatusLatestrevisionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusLatestrevision)(nil)).Elem()
}

func (i *applicationStatusLatestrevisionPtrType) ToApplicationStatusLatestrevisionPtrOutput() ApplicationStatusLatestrevisionPtrOutput {
	return i.ToApplicationStatusLatestrevisionPtrOutputWithContext(context.Background())
}

func (i *applicationStatusLatestrevisionPtrType) ToApplicationStatusLatestrevisionPtrOutputWithContext(ctx context.Context) ApplicationStatusLatestrevisionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusLatestrevisionPtrOutput)
}

// LatestRevision of the application configuration it generates
type ApplicationStatusLatestrevisionOutput struct{ *pulumi.OutputState }

func (ApplicationStatusLatestrevisionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusLatestrevision)(nil)).Elem()
}

func (o ApplicationStatusLatestrevisionOutput) ToApplicationStatusLatestrevisionOutput() ApplicationStatusLatestrevisionOutput {
	return o
}

func (o ApplicationStatusLatestrevisionOutput) ToApplicationStatusLatestrevisionOutputWithContext(ctx context.Context) ApplicationStatusLatestrevisionOutput {
	return o
}

func (o ApplicationStatusLatestrevisionOutput) ToApplicationStatusLatestrevisionPtrOutput() ApplicationStatusLatestrevisionPtrOutput {
	return o.ToApplicationStatusLatestrevisionPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusLatestrevisionOutput) ToApplicationStatusLatestrevisionPtrOutputWithContext(ctx context.Context) ApplicationStatusLatestrevisionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationStatusLatestrevision) *ApplicationStatusLatestrevision {
		return &v
	}).(ApplicationStatusLatestrevisionPtrOutput)
}

func (o ApplicationStatusLatestrevisionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusLatestrevision) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationStatusLatestrevisionOutput) Revision() pulumi.IntOutput {
	return o.ApplyT(func(v ApplicationStatusLatestrevision) int { return v.Revision }).(pulumi.IntOutput)
}

// RevisionHash record the hash value of the spec of ApplicationRevision object.
func (o ApplicationStatusLatestrevisionOutput) RevisionHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusLatestrevision) *string { return v.RevisionHash }).(pulumi.StringPtrOutput)
}

type ApplicationStatusLatestrevisionPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusLatestrevisionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusLatestrevision)(nil)).Elem()
}

func (o ApplicationStatusLatestrevisionPtrOutput) ToApplicationStatusLatestrevisionPtrOutput() ApplicationStatusLatestrevisionPtrOutput {
	return o
}

func (o ApplicationStatusLatestrevisionPtrOutput) ToApplicationStatusLatestrevisionPtrOutputWithContext(ctx context.Context) ApplicationStatusLatestrevisionPtrOutput {
	return o
}

func (o ApplicationStatusLatestrevisionPtrOutput) Elem() ApplicationStatusLatestrevisionOutput {
	return o.ApplyT(func(v *ApplicationStatusLatestrevision) ApplicationStatusLatestrevision {
		if v != nil {
			return *v
		}
		var ret ApplicationStatusLatestrevision
		return ret
	}).(ApplicationStatusLatestrevisionOutput)
}

func (o ApplicationStatusLatestrevisionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusLatestrevision) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusLatestrevisionPtrOutput) Revision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusLatestrevision) *int {
		if v == nil {
			return nil
		}
		return &v.Revision
	}).(pulumi.IntPtrOutput)
}

// RevisionHash record the hash value of the spec of ApplicationRevision object.
func (o ApplicationStatusLatestrevisionPtrOutput) RevisionHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusLatestrevision) *string {
		if v == nil {
			return nil
		}
		return v.RevisionHash
	}).(pulumi.StringPtrOutput)
}

// PolicyStatus records the status of policy Deprecated
type ApplicationStatusPolicy struct {
	Name   string                 `pulumi:"name"`
	Status map[string]interface{} `pulumi:"status"`
	Type   string                 `pulumi:"type"`
}

// ApplicationStatusPolicyInput is an input type that accepts ApplicationStatusPolicyArgs and ApplicationStatusPolicyOutput values.
// You can construct a concrete instance of `ApplicationStatusPolicyInput` via:
//
//	ApplicationStatusPolicyArgs{...}
type ApplicationStatusPolicyInput interface {
	pulumi.Input

	ToApplicationStatusPolicyOutput() ApplicationStatusPolicyOutput
	ToApplicationStatusPolicyOutputWithContext(context.Context) ApplicationStatusPolicyOutput
}

// PolicyStatus records the status of policy Deprecated
type ApplicationStatusPolicyArgs struct {
	Name   pulumi.StringInput `pulumi:"name"`
	Status pulumi.MapInput    `pulumi:"status"`
	Type   pulumi.StringInput `pulumi:"type"`
}

func (ApplicationStatusPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusPolicy)(nil)).Elem()
}

func (i ApplicationStatusPolicyArgs) ToApplicationStatusPolicyOutput() ApplicationStatusPolicyOutput {
	return i.ToApplicationStatusPolicyOutputWithContext(context.Background())
}

func (i ApplicationStatusPolicyArgs) ToApplicationStatusPolicyOutputWithContext(ctx context.Context) ApplicationStatusPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusPolicyOutput)
}

// ApplicationStatusPolicyArrayInput is an input type that accepts ApplicationStatusPolicyArray and ApplicationStatusPolicyArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusPolicyArrayInput` via:
//
//	ApplicationStatusPolicyArray{ ApplicationStatusPolicyArgs{...} }
type ApplicationStatusPolicyArrayInput interface {
	pulumi.Input

	ToApplicationStatusPolicyArrayOutput() ApplicationStatusPolicyArrayOutput
	ToApplicationStatusPolicyArrayOutputWithContext(context.Context) ApplicationStatusPolicyArrayOutput
}

type ApplicationStatusPolicyArray []ApplicationStatusPolicyInput

func (ApplicationStatusPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusPolicy)(nil)).Elem()
}

func (i ApplicationStatusPolicyArray) ToApplicationStatusPolicyArrayOutput() ApplicationStatusPolicyArrayOutput {
	return i.ToApplicationStatusPolicyArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusPolicyArray) ToApplicationStatusPolicyArrayOutputWithContext(ctx context.Context) ApplicationStatusPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusPolicyArrayOutput)
}

// PolicyStatus records the status of policy Deprecated
type ApplicationStatusPolicyOutput struct{ *pulumi.OutputState }

func (ApplicationStatusPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusPolicy)(nil)).Elem()
}

func (o ApplicationStatusPolicyOutput) ToApplicationStatusPolicyOutput() ApplicationStatusPolicyOutput {
	return o
}

func (o ApplicationStatusPolicyOutput) ToApplicationStatusPolicyOutputWithContext(ctx context.Context) ApplicationStatusPolicyOutput {
	return o
}

func (o ApplicationStatusPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusPolicy) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationStatusPolicyOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v ApplicationStatusPolicy) map[string]interface{} { return v.Status }).(pulumi.MapOutput)
}

func (o ApplicationStatusPolicyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusPolicy) string { return v.Type }).(pulumi.StringOutput)
}

type ApplicationStatusPolicyArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusPolicy)(nil)).Elem()
}

func (o ApplicationStatusPolicyArrayOutput) ToApplicationStatusPolicyArrayOutput() ApplicationStatusPolicyArrayOutput {
	return o
}

func (o ApplicationStatusPolicyArrayOutput) ToApplicationStatusPolicyArrayOutputWithContext(ctx context.Context) ApplicationStatusPolicyArrayOutput {
	return o
}

func (o ApplicationStatusPolicyArrayOutput) Index(i pulumi.IntInput) ApplicationStatusPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusPolicy {
		return vs[0].([]ApplicationStatusPolicy)[vs[1].(int)]
	}).(ApplicationStatusPolicyOutput)
}

// ApplicationComponentStatus record the health status of App component
type ApplicationStatusServices struct {
	Cluster   *string                           `pulumi:"cluster"`
	Env       *string                           `pulumi:"env"`
	Healthy   bool                              `pulumi:"healthy"`
	Message   *string                           `pulumi:"message"`
	Name      string                            `pulumi:"name"`
	Namespace *string                           `pulumi:"namespace"`
	Scopes    []ApplicationStatusServicesScopes `pulumi:"scopes"`
	Traits    []ApplicationStatusServicesTraits `pulumi:"traits"`
	// WorkloadDefinition is the definition of a WorkloadDefinition, such as deployments/apps.v1
	WorkloadDefinition *ApplicationStatusServicesWorkloaddefinition `pulumi:"workloadDefinition"`
}

// ApplicationStatusServicesInput is an input type that accepts ApplicationStatusServicesArgs and ApplicationStatusServicesOutput values.
// You can construct a concrete instance of `ApplicationStatusServicesInput` via:
//
//	ApplicationStatusServicesArgs{...}
type ApplicationStatusServicesInput interface {
	pulumi.Input

	ToApplicationStatusServicesOutput() ApplicationStatusServicesOutput
	ToApplicationStatusServicesOutputWithContext(context.Context) ApplicationStatusServicesOutput
}

// ApplicationComponentStatus record the health status of App component
type ApplicationStatusServicesArgs struct {
	Cluster   pulumi.StringPtrInput                     `pulumi:"cluster"`
	Env       pulumi.StringPtrInput                     `pulumi:"env"`
	Healthy   pulumi.BoolInput                          `pulumi:"healthy"`
	Message   pulumi.StringPtrInput                     `pulumi:"message"`
	Name      pulumi.StringInput                        `pulumi:"name"`
	Namespace pulumi.StringPtrInput                     `pulumi:"namespace"`
	Scopes    ApplicationStatusServicesScopesArrayInput `pulumi:"scopes"`
	Traits    ApplicationStatusServicesTraitsArrayInput `pulumi:"traits"`
	// WorkloadDefinition is the definition of a WorkloadDefinition, such as deployments/apps.v1
	WorkloadDefinition ApplicationStatusServicesWorkloaddefinitionPtrInput `pulumi:"workloadDefinition"`
}

func (ApplicationStatusServicesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusServices)(nil)).Elem()
}

func (i ApplicationStatusServicesArgs) ToApplicationStatusServicesOutput() ApplicationStatusServicesOutput {
	return i.ToApplicationStatusServicesOutputWithContext(context.Background())
}

func (i ApplicationStatusServicesArgs) ToApplicationStatusServicesOutputWithContext(ctx context.Context) ApplicationStatusServicesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusServicesOutput)
}

// ApplicationStatusServicesArrayInput is an input type that accepts ApplicationStatusServicesArray and ApplicationStatusServicesArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusServicesArrayInput` via:
//
//	ApplicationStatusServicesArray{ ApplicationStatusServicesArgs{...} }
type ApplicationStatusServicesArrayInput interface {
	pulumi.Input

	ToApplicationStatusServicesArrayOutput() ApplicationStatusServicesArrayOutput
	ToApplicationStatusServicesArrayOutputWithContext(context.Context) ApplicationStatusServicesArrayOutput
}

type ApplicationStatusServicesArray []ApplicationStatusServicesInput

func (ApplicationStatusServicesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusServices)(nil)).Elem()
}

func (i ApplicationStatusServicesArray) ToApplicationStatusServicesArrayOutput() ApplicationStatusServicesArrayOutput {
	return i.ToApplicationStatusServicesArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusServicesArray) ToApplicationStatusServicesArrayOutputWithContext(ctx context.Context) ApplicationStatusServicesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusServicesArrayOutput)
}

// ApplicationComponentStatus record the health status of App component
type ApplicationStatusServicesOutput struct{ *pulumi.OutputState }

func (ApplicationStatusServicesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusServices)(nil)).Elem()
}

func (o ApplicationStatusServicesOutput) ToApplicationStatusServicesOutput() ApplicationStatusServicesOutput {
	return o
}

func (o ApplicationStatusServicesOutput) ToApplicationStatusServicesOutputWithContext(ctx context.Context) ApplicationStatusServicesOutput {
	return o
}

func (o ApplicationStatusServicesOutput) Cluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusServices) *string { return v.Cluster }).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusServicesOutput) Env() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusServices) *string { return v.Env }).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusServicesOutput) Healthy() pulumi.BoolOutput {
	return o.ApplyT(func(v ApplicationStatusServices) bool { return v.Healthy }).(pulumi.BoolOutput)
}

func (o ApplicationStatusServicesOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusServices) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusServicesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusServices) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationStatusServicesOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusServices) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusServicesOutput) Scopes() ApplicationStatusServicesScopesArrayOutput {
	return o.ApplyT(func(v ApplicationStatusServices) []ApplicationStatusServicesScopes { return v.Scopes }).(ApplicationStatusServicesScopesArrayOutput)
}

func (o ApplicationStatusServicesOutput) Traits() ApplicationStatusServicesTraitsArrayOutput {
	return o.ApplyT(func(v ApplicationStatusServices) []ApplicationStatusServicesTraits { return v.Traits }).(ApplicationStatusServicesTraitsArrayOutput)
}

// WorkloadDefinition is the definition of a WorkloadDefinition, such as deployments/apps.v1
func (o ApplicationStatusServicesOutput) WorkloadDefinition() ApplicationStatusServicesWorkloaddefinitionPtrOutput {
	return o.ApplyT(func(v ApplicationStatusServices) *ApplicationStatusServicesWorkloaddefinition {
		return v.WorkloadDefinition
	}).(ApplicationStatusServicesWorkloaddefinitionPtrOutput)
}

type ApplicationStatusServicesArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusServicesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusServices)(nil)).Elem()
}

func (o ApplicationStatusServicesArrayOutput) ToApplicationStatusServicesArrayOutput() ApplicationStatusServicesArrayOutput {
	return o
}

func (o ApplicationStatusServicesArrayOutput) ToApplicationStatusServicesArrayOutputWithContext(ctx context.Context) ApplicationStatusServicesArrayOutput {
	return o
}

func (o ApplicationStatusServicesArrayOutput) Index(i pulumi.IntInput) ApplicationStatusServicesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusServices {
		return vs[0].([]ApplicationStatusServices)[vs[1].(int)]
	}).(ApplicationStatusServicesOutput)
}

// ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.
//
//	Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
type ApplicationStatusServicesScopes struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// ApplicationStatusServicesScopesInput is an input type that accepts ApplicationStatusServicesScopesArgs and ApplicationStatusServicesScopesOutput values.
// You can construct a concrete instance of `ApplicationStatusServicesScopesInput` via:
//
//	ApplicationStatusServicesScopesArgs{...}
type ApplicationStatusServicesScopesInput interface {
	pulumi.Input

	ToApplicationStatusServicesScopesOutput() ApplicationStatusServicesScopesOutput
	ToApplicationStatusServicesScopesOutputWithContext(context.Context) ApplicationStatusServicesScopesOutput
}

// ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.
//
//	Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
type ApplicationStatusServicesScopesArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ApplicationStatusServicesScopesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusServicesScopes)(nil)).Elem()
}

func (i ApplicationStatusServicesScopesArgs) ToApplicationStatusServicesScopesOutput() ApplicationStatusServicesScopesOutput {
	return i.ToApplicationStatusServicesScopesOutputWithContext(context.Background())
}

func (i ApplicationStatusServicesScopesArgs) ToApplicationStatusServicesScopesOutputWithContext(ctx context.Context) ApplicationStatusServicesScopesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusServicesScopesOutput)
}

// ApplicationStatusServicesScopesArrayInput is an input type that accepts ApplicationStatusServicesScopesArray and ApplicationStatusServicesScopesArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusServicesScopesArrayInput` via:
//
//	ApplicationStatusServicesScopesArray{ ApplicationStatusServicesScopesArgs{...} }
type ApplicationStatusServicesScopesArrayInput interface {
	pulumi.Input

	ToApplicationStatusServicesScopesArrayOutput() ApplicationStatusServicesScopesArrayOutput
	ToApplicationStatusServicesScopesArrayOutputWithContext(context.Context) ApplicationStatusServicesScopesArrayOutput
}

type ApplicationStatusServicesScopesArray []ApplicationStatusServicesScopesInput

func (ApplicationStatusServicesScopesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusServicesScopes)(nil)).Elem()
}

func (i ApplicationStatusServicesScopesArray) ToApplicationStatusServicesScopesArrayOutput() ApplicationStatusServicesScopesArrayOutput {
	return i.ToApplicationStatusServicesScopesArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusServicesScopesArray) ToApplicationStatusServicesScopesArrayOutputWithContext(ctx context.Context) ApplicationStatusServicesScopesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusServicesScopesArrayOutput)
}

// ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.
//
//	Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
type ApplicationStatusServicesScopesOutput struct{ *pulumi.OutputState }

func (ApplicationStatusServicesScopesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusServicesScopes)(nil)).Elem()
}

func (o ApplicationStatusServicesScopesOutput) ToApplicationStatusServicesScopesOutput() ApplicationStatusServicesScopesOutput {
	return o
}

func (o ApplicationStatusServicesScopesOutput) ToApplicationStatusServicesScopesOutputWithContext(ctx context.Context) ApplicationStatusServicesScopesOutput {
	return o
}

// API version of the referent.
func (o ApplicationStatusServicesScopesOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusServicesScopes) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o ApplicationStatusServicesScopesOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusServicesScopes) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ApplicationStatusServicesScopesOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusServicesScopes) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ApplicationStatusServicesScopesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusServicesScopes) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o ApplicationStatusServicesScopesOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusServicesScopes) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ApplicationStatusServicesScopesOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusServicesScopes) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o ApplicationStatusServicesScopesOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusServicesScopes) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ApplicationStatusServicesScopesArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusServicesScopesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusServicesScopes)(nil)).Elem()
}

func (o ApplicationStatusServicesScopesArrayOutput) ToApplicationStatusServicesScopesArrayOutput() ApplicationStatusServicesScopesArrayOutput {
	return o
}

func (o ApplicationStatusServicesScopesArrayOutput) ToApplicationStatusServicesScopesArrayOutputWithContext(ctx context.Context) ApplicationStatusServicesScopesArrayOutput {
	return o
}

func (o ApplicationStatusServicesScopesArrayOutput) Index(i pulumi.IntInput) ApplicationStatusServicesScopesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusServicesScopes {
		return vs[0].([]ApplicationStatusServicesScopes)[vs[1].(int)]
	}).(ApplicationStatusServicesScopesOutput)
}

// ApplicationTraitStatus records the trait health status
type ApplicationStatusServicesTraits struct {
	Healthy bool    `pulumi:"healthy"`
	Message *string `pulumi:"message"`
	Type    string  `pulumi:"type"`
}

// ApplicationStatusServicesTraitsInput is an input type that accepts ApplicationStatusServicesTraitsArgs and ApplicationStatusServicesTraitsOutput values.
// You can construct a concrete instance of `ApplicationStatusServicesTraitsInput` via:
//
//	ApplicationStatusServicesTraitsArgs{...}
type ApplicationStatusServicesTraitsInput interface {
	pulumi.Input

	ToApplicationStatusServicesTraitsOutput() ApplicationStatusServicesTraitsOutput
	ToApplicationStatusServicesTraitsOutputWithContext(context.Context) ApplicationStatusServicesTraitsOutput
}

// ApplicationTraitStatus records the trait health status
type ApplicationStatusServicesTraitsArgs struct {
	Healthy pulumi.BoolInput      `pulumi:"healthy"`
	Message pulumi.StringPtrInput `pulumi:"message"`
	Type    pulumi.StringInput    `pulumi:"type"`
}

func (ApplicationStatusServicesTraitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusServicesTraits)(nil)).Elem()
}

func (i ApplicationStatusServicesTraitsArgs) ToApplicationStatusServicesTraitsOutput() ApplicationStatusServicesTraitsOutput {
	return i.ToApplicationStatusServicesTraitsOutputWithContext(context.Background())
}

func (i ApplicationStatusServicesTraitsArgs) ToApplicationStatusServicesTraitsOutputWithContext(ctx context.Context) ApplicationStatusServicesTraitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusServicesTraitsOutput)
}

// ApplicationStatusServicesTraitsArrayInput is an input type that accepts ApplicationStatusServicesTraitsArray and ApplicationStatusServicesTraitsArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusServicesTraitsArrayInput` via:
//
//	ApplicationStatusServicesTraitsArray{ ApplicationStatusServicesTraitsArgs{...} }
type ApplicationStatusServicesTraitsArrayInput interface {
	pulumi.Input

	ToApplicationStatusServicesTraitsArrayOutput() ApplicationStatusServicesTraitsArrayOutput
	ToApplicationStatusServicesTraitsArrayOutputWithContext(context.Context) ApplicationStatusServicesTraitsArrayOutput
}

type ApplicationStatusServicesTraitsArray []ApplicationStatusServicesTraitsInput

func (ApplicationStatusServicesTraitsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusServicesTraits)(nil)).Elem()
}

func (i ApplicationStatusServicesTraitsArray) ToApplicationStatusServicesTraitsArrayOutput() ApplicationStatusServicesTraitsArrayOutput {
	return i.ToApplicationStatusServicesTraitsArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusServicesTraitsArray) ToApplicationStatusServicesTraitsArrayOutputWithContext(ctx context.Context) ApplicationStatusServicesTraitsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusServicesTraitsArrayOutput)
}

// ApplicationTraitStatus records the trait health status
type ApplicationStatusServicesTraitsOutput struct{ *pulumi.OutputState }

func (ApplicationStatusServicesTraitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusServicesTraits)(nil)).Elem()
}

func (o ApplicationStatusServicesTraitsOutput) ToApplicationStatusServicesTraitsOutput() ApplicationStatusServicesTraitsOutput {
	return o
}

func (o ApplicationStatusServicesTraitsOutput) ToApplicationStatusServicesTraitsOutputWithContext(ctx context.Context) ApplicationStatusServicesTraitsOutput {
	return o
}

func (o ApplicationStatusServicesTraitsOutput) Healthy() pulumi.BoolOutput {
	return o.ApplyT(func(v ApplicationStatusServicesTraits) bool { return v.Healthy }).(pulumi.BoolOutput)
}

func (o ApplicationStatusServicesTraitsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusServicesTraits) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusServicesTraitsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusServicesTraits) string { return v.Type }).(pulumi.StringOutput)
}

type ApplicationStatusServicesTraitsArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusServicesTraitsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusServicesTraits)(nil)).Elem()
}

func (o ApplicationStatusServicesTraitsArrayOutput) ToApplicationStatusServicesTraitsArrayOutput() ApplicationStatusServicesTraitsArrayOutput {
	return o
}

func (o ApplicationStatusServicesTraitsArrayOutput) ToApplicationStatusServicesTraitsArrayOutputWithContext(ctx context.Context) ApplicationStatusServicesTraitsArrayOutput {
	return o
}

func (o ApplicationStatusServicesTraitsArrayOutput) Index(i pulumi.IntInput) ApplicationStatusServicesTraitsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusServicesTraits {
		return vs[0].([]ApplicationStatusServicesTraits)[vs[1].(int)]
	}).(ApplicationStatusServicesTraitsOutput)
}

// WorkloadDefinition is the definition of a WorkloadDefinition, such as deployments/apps.v1
type ApplicationStatusServicesWorkloaddefinition struct {
	ApiVersion string `pulumi:"apiVersion"`
	Kind       string `pulumi:"kind"`
}

// ApplicationStatusServicesWorkloaddefinitionInput is an input type that accepts ApplicationStatusServicesWorkloaddefinitionArgs and ApplicationStatusServicesWorkloaddefinitionOutput values.
// You can construct a concrete instance of `ApplicationStatusServicesWorkloaddefinitionInput` via:
//
//	ApplicationStatusServicesWorkloaddefinitionArgs{...}
type ApplicationStatusServicesWorkloaddefinitionInput interface {
	pulumi.Input

	ToApplicationStatusServicesWorkloaddefinitionOutput() ApplicationStatusServicesWorkloaddefinitionOutput
	ToApplicationStatusServicesWorkloaddefinitionOutputWithContext(context.Context) ApplicationStatusServicesWorkloaddefinitionOutput
}

// WorkloadDefinition is the definition of a WorkloadDefinition, such as deployments/apps.v1
type ApplicationStatusServicesWorkloaddefinitionArgs struct {
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`
	Kind       pulumi.StringInput `pulumi:"kind"`
}

func (ApplicationStatusServicesWorkloaddefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusServicesWorkloaddefinition)(nil)).Elem()
}

func (i ApplicationStatusServicesWorkloaddefinitionArgs) ToApplicationStatusServicesWorkloaddefinitionOutput() ApplicationStatusServicesWorkloaddefinitionOutput {
	return i.ToApplicationStatusServicesWorkloaddefinitionOutputWithContext(context.Background())
}

func (i ApplicationStatusServicesWorkloaddefinitionArgs) ToApplicationStatusServicesWorkloaddefinitionOutputWithContext(ctx context.Context) ApplicationStatusServicesWorkloaddefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusServicesWorkloaddefinitionOutput)
}

func (i ApplicationStatusServicesWorkloaddefinitionArgs) ToApplicationStatusServicesWorkloaddefinitionPtrOutput() ApplicationStatusServicesWorkloaddefinitionPtrOutput {
	return i.ToApplicationStatusServicesWorkloaddefinitionPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusServicesWorkloaddefinitionArgs) ToApplicationStatusServicesWorkloaddefinitionPtrOutputWithContext(ctx context.Context) ApplicationStatusServicesWorkloaddefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusServicesWorkloaddefinitionOutput).ToApplicationStatusServicesWorkloaddefinitionPtrOutputWithContext(ctx)
}

// ApplicationStatusServicesWorkloaddefinitionPtrInput is an input type that accepts ApplicationStatusServicesWorkloaddefinitionArgs, ApplicationStatusServicesWorkloaddefinitionPtr and ApplicationStatusServicesWorkloaddefinitionPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusServicesWorkloaddefinitionPtrInput` via:
//
//	        ApplicationStatusServicesWorkloaddefinitionArgs{...}
//
//	or:
//
//	        nil
type ApplicationStatusServicesWorkloaddefinitionPtrInput interface {
	pulumi.Input

	ToApplicationStatusServicesWorkloaddefinitionPtrOutput() ApplicationStatusServicesWorkloaddefinitionPtrOutput
	ToApplicationStatusServicesWorkloaddefinitionPtrOutputWithContext(context.Context) ApplicationStatusServicesWorkloaddefinitionPtrOutput
}

type applicationStatusServicesWorkloaddefinitionPtrType ApplicationStatusServicesWorkloaddefinitionArgs

func ApplicationStatusServicesWorkloaddefinitionPtr(v *ApplicationStatusServicesWorkloaddefinitionArgs) ApplicationStatusServicesWorkloaddefinitionPtrInput {
	return (*applicationStatusServicesWorkloaddefinitionPtrType)(v)
}

func (*applicationStatusServicesWorkloaddefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusServicesWorkloaddefinition)(nil)).Elem()
}

func (i *applicationStatusServicesWorkloaddefinitionPtrType) ToApplicationStatusServicesWorkloaddefinitionPtrOutput() ApplicationStatusServicesWorkloaddefinitionPtrOutput {
	return i.ToApplicationStatusServicesWorkloaddefinitionPtrOutputWithContext(context.Background())
}

func (i *applicationStatusServicesWorkloaddefinitionPtrType) ToApplicationStatusServicesWorkloaddefinitionPtrOutputWithContext(ctx context.Context) ApplicationStatusServicesWorkloaddefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusServicesWorkloaddefinitionPtrOutput)
}

// WorkloadDefinition is the definition of a WorkloadDefinition, such as deployments/apps.v1
type ApplicationStatusServicesWorkloaddefinitionOutput struct{ *pulumi.OutputState }

func (ApplicationStatusServicesWorkloaddefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusServicesWorkloaddefinition)(nil)).Elem()
}

func (o ApplicationStatusServicesWorkloaddefinitionOutput) ToApplicationStatusServicesWorkloaddefinitionOutput() ApplicationStatusServicesWorkloaddefinitionOutput {
	return o
}

func (o ApplicationStatusServicesWorkloaddefinitionOutput) ToApplicationStatusServicesWorkloaddefinitionOutputWithContext(ctx context.Context) ApplicationStatusServicesWorkloaddefinitionOutput {
	return o
}

func (o ApplicationStatusServicesWorkloaddefinitionOutput) ToApplicationStatusServicesWorkloaddefinitionPtrOutput() ApplicationStatusServicesWorkloaddefinitionPtrOutput {
	return o.ToApplicationStatusServicesWorkloaddefinitionPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusServicesWorkloaddefinitionOutput) ToApplicationStatusServicesWorkloaddefinitionPtrOutputWithContext(ctx context.Context) ApplicationStatusServicesWorkloaddefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationStatusServicesWorkloaddefinition) *ApplicationStatusServicesWorkloaddefinition {
		return &v
	}).(ApplicationStatusServicesWorkloaddefinitionPtrOutput)
}

func (o ApplicationStatusServicesWorkloaddefinitionOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusServicesWorkloaddefinition) string { return v.ApiVersion }).(pulumi.StringOutput)
}

func (o ApplicationStatusServicesWorkloaddefinitionOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusServicesWorkloaddefinition) string { return v.Kind }).(pulumi.StringOutput)
}

type ApplicationStatusServicesWorkloaddefinitionPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusServicesWorkloaddefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusServicesWorkloaddefinition)(nil)).Elem()
}

func (o ApplicationStatusServicesWorkloaddefinitionPtrOutput) ToApplicationStatusServicesWorkloaddefinitionPtrOutput() ApplicationStatusServicesWorkloaddefinitionPtrOutput {
	return o
}

func (o ApplicationStatusServicesWorkloaddefinitionPtrOutput) ToApplicationStatusServicesWorkloaddefinitionPtrOutputWithContext(ctx context.Context) ApplicationStatusServicesWorkloaddefinitionPtrOutput {
	return o
}

func (o ApplicationStatusServicesWorkloaddefinitionPtrOutput) Elem() ApplicationStatusServicesWorkloaddefinitionOutput {
	return o.ApplyT(func(v *ApplicationStatusServicesWorkloaddefinition) ApplicationStatusServicesWorkloaddefinition {
		if v != nil {
			return *v
		}
		var ret ApplicationStatusServicesWorkloaddefinition
		return ret
	}).(ApplicationStatusServicesWorkloaddefinitionOutput)
}

func (o ApplicationStatusServicesWorkloaddefinitionPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusServicesWorkloaddefinition) *string {
		if v == nil {
			return nil
		}
		return &v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusServicesWorkloaddefinitionPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusServicesWorkloaddefinition) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Workflow record the status of workflow
type ApplicationStatusWorkflow struct {
	AppRevision *string `pulumi:"appRevision"`
	// ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.
	//  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
	ContextBackend *ApplicationStatusWorkflowContextbackend `pulumi:"contextBackend"`
	EndTime        *string                                  `pulumi:"endTime"`
	Finished       bool                                     `pulumi:"finished"`
	Message        *string                                  `pulumi:"message"`
	Mode           string                                   `pulumi:"mode"`
	StartTime      *string                                  `pulumi:"startTime"`
	// WorkflowRunPhase is a label for the condition of a WorkflowRun at the current time
	Status       *string                          `pulumi:"status"`
	Steps        []ApplicationStatusWorkflowSteps `pulumi:"steps"`
	Suspend      bool                             `pulumi:"suspend"`
	SuspendState *string                          `pulumi:"suspendState"`
	Terminated   bool                             `pulumi:"terminated"`
}

// ApplicationStatusWorkflowInput is an input type that accepts ApplicationStatusWorkflowArgs and ApplicationStatusWorkflowOutput values.
// You can construct a concrete instance of `ApplicationStatusWorkflowInput` via:
//
//	ApplicationStatusWorkflowArgs{...}
type ApplicationStatusWorkflowInput interface {
	pulumi.Input

	ToApplicationStatusWorkflowOutput() ApplicationStatusWorkflowOutput
	ToApplicationStatusWorkflowOutputWithContext(context.Context) ApplicationStatusWorkflowOutput
}

// Workflow record the status of workflow
type ApplicationStatusWorkflowArgs struct {
	AppRevision pulumi.StringPtrInput `pulumi:"appRevision"`
	// ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.
	//  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
	ContextBackend ApplicationStatusWorkflowContextbackendPtrInput `pulumi:"contextBackend"`
	EndTime        pulumi.StringPtrInput                           `pulumi:"endTime"`
	Finished       pulumi.BoolInput                                `pulumi:"finished"`
	Message        pulumi.StringPtrInput                           `pulumi:"message"`
	Mode           pulumi.StringInput                              `pulumi:"mode"`
	StartTime      pulumi.StringPtrInput                           `pulumi:"startTime"`
	// WorkflowRunPhase is a label for the condition of a WorkflowRun at the current time
	Status       pulumi.StringPtrInput                    `pulumi:"status"`
	Steps        ApplicationStatusWorkflowStepsArrayInput `pulumi:"steps"`
	Suspend      pulumi.BoolInput                         `pulumi:"suspend"`
	SuspendState pulumi.StringPtrInput                    `pulumi:"suspendState"`
	Terminated   pulumi.BoolInput                         `pulumi:"terminated"`
}

func (ApplicationStatusWorkflowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusWorkflow)(nil)).Elem()
}

func (i ApplicationStatusWorkflowArgs) ToApplicationStatusWorkflowOutput() ApplicationStatusWorkflowOutput {
	return i.ToApplicationStatusWorkflowOutputWithContext(context.Background())
}

func (i ApplicationStatusWorkflowArgs) ToApplicationStatusWorkflowOutputWithContext(ctx context.Context) ApplicationStatusWorkflowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusWorkflowOutput)
}

func (i ApplicationStatusWorkflowArgs) ToApplicationStatusWorkflowPtrOutput() ApplicationStatusWorkflowPtrOutput {
	return i.ToApplicationStatusWorkflowPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusWorkflowArgs) ToApplicationStatusWorkflowPtrOutputWithContext(ctx context.Context) ApplicationStatusWorkflowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusWorkflowOutput).ToApplicationStatusWorkflowPtrOutputWithContext(ctx)
}

// ApplicationStatusWorkflowPtrInput is an input type that accepts ApplicationStatusWorkflowArgs, ApplicationStatusWorkflowPtr and ApplicationStatusWorkflowPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusWorkflowPtrInput` via:
//
//	        ApplicationStatusWorkflowArgs{...}
//
//	or:
//
//	        nil
type ApplicationStatusWorkflowPtrInput interface {
	pulumi.Input

	ToApplicationStatusWorkflowPtrOutput() ApplicationStatusWorkflowPtrOutput
	ToApplicationStatusWorkflowPtrOutputWithContext(context.Context) ApplicationStatusWorkflowPtrOutput
}

type applicationStatusWorkflowPtrType ApplicationStatusWorkflowArgs

func ApplicationStatusWorkflowPtr(v *ApplicationStatusWorkflowArgs) ApplicationStatusWorkflowPtrInput {
	return (*applicationStatusWorkflowPtrType)(v)
}

func (*applicationStatusWorkflowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusWorkflow)(nil)).Elem()
}

func (i *applicationStatusWorkflowPtrType) ToApplicationStatusWorkflowPtrOutput() ApplicationStatusWorkflowPtrOutput {
	return i.ToApplicationStatusWorkflowPtrOutputWithContext(context.Background())
}

func (i *applicationStatusWorkflowPtrType) ToApplicationStatusWorkflowPtrOutputWithContext(ctx context.Context) ApplicationStatusWorkflowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusWorkflowPtrOutput)
}

// Workflow record the status of workflow
type ApplicationStatusWorkflowOutput struct{ *pulumi.OutputState }

func (ApplicationStatusWorkflowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusWorkflow)(nil)).Elem()
}

func (o ApplicationStatusWorkflowOutput) ToApplicationStatusWorkflowOutput() ApplicationStatusWorkflowOutput {
	return o
}

func (o ApplicationStatusWorkflowOutput) ToApplicationStatusWorkflowOutputWithContext(ctx context.Context) ApplicationStatusWorkflowOutput {
	return o
}

func (o ApplicationStatusWorkflowOutput) ToApplicationStatusWorkflowPtrOutput() ApplicationStatusWorkflowPtrOutput {
	return o.ToApplicationStatusWorkflowPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusWorkflowOutput) ToApplicationStatusWorkflowPtrOutputWithContext(ctx context.Context) ApplicationStatusWorkflowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationStatusWorkflow) *ApplicationStatusWorkflow {
		return &v
	}).(ApplicationStatusWorkflowPtrOutput)
}

func (o ApplicationStatusWorkflowOutput) AppRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflow) *string { return v.AppRevision }).(pulumi.StringPtrOutput)
}

// ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.
//
//	Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
func (o ApplicationStatusWorkflowOutput) ContextBackend() ApplicationStatusWorkflowContextbackendPtrOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflow) *ApplicationStatusWorkflowContextbackend { return v.ContextBackend }).(ApplicationStatusWorkflowContextbackendPtrOutput)
}

func (o ApplicationStatusWorkflowOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflow) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusWorkflowOutput) Finished() pulumi.BoolOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflow) bool { return v.Finished }).(pulumi.BoolOutput)
}

func (o ApplicationStatusWorkflowOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflow) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusWorkflowOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflow) string { return v.Mode }).(pulumi.StringOutput)
}

func (o ApplicationStatusWorkflowOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflow) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// WorkflowRunPhase is a label for the condition of a WorkflowRun at the current time
func (o ApplicationStatusWorkflowOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflow) *string { return v.Status }).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusWorkflowOutput) Steps() ApplicationStatusWorkflowStepsArrayOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflow) []ApplicationStatusWorkflowSteps { return v.Steps }).(ApplicationStatusWorkflowStepsArrayOutput)
}

func (o ApplicationStatusWorkflowOutput) Suspend() pulumi.BoolOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflow) bool { return v.Suspend }).(pulumi.BoolOutput)
}

func (o ApplicationStatusWorkflowOutput) SuspendState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflow) *string { return v.SuspendState }).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusWorkflowOutput) Terminated() pulumi.BoolOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflow) bool { return v.Terminated }).(pulumi.BoolOutput)
}

type ApplicationStatusWorkflowPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusWorkflowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusWorkflow)(nil)).Elem()
}

func (o ApplicationStatusWorkflowPtrOutput) ToApplicationStatusWorkflowPtrOutput() ApplicationStatusWorkflowPtrOutput {
	return o
}

func (o ApplicationStatusWorkflowPtrOutput) ToApplicationStatusWorkflowPtrOutputWithContext(ctx context.Context) ApplicationStatusWorkflowPtrOutput {
	return o
}

func (o ApplicationStatusWorkflowPtrOutput) Elem() ApplicationStatusWorkflowOutput {
	return o.ApplyT(func(v *ApplicationStatusWorkflow) ApplicationStatusWorkflow {
		if v != nil {
			return *v
		}
		var ret ApplicationStatusWorkflow
		return ret
	}).(ApplicationStatusWorkflowOutput)
}

func (o ApplicationStatusWorkflowPtrOutput) AppRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusWorkflow) *string {
		if v == nil {
			return nil
		}
		return v.AppRevision
	}).(pulumi.StringPtrOutput)
}

// ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.
//
//	Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
func (o ApplicationStatusWorkflowPtrOutput) ContextBackend() ApplicationStatusWorkflowContextbackendPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusWorkflow) *ApplicationStatusWorkflowContextbackend {
		if v == nil {
			return nil
		}
		return v.ContextBackend
	}).(ApplicationStatusWorkflowContextbackendPtrOutput)
}

func (o ApplicationStatusWorkflowPtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusWorkflow) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusWorkflowPtrOutput) Finished() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusWorkflow) *bool {
		if v == nil {
			return nil
		}
		return &v.Finished
	}).(pulumi.BoolPtrOutput)
}

func (o ApplicationStatusWorkflowPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusWorkflow) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusWorkflowPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusWorkflow) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusWorkflowPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusWorkflow) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// WorkflowRunPhase is a label for the condition of a WorkflowRun at the current time
func (o ApplicationStatusWorkflowPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusWorkflow) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusWorkflowPtrOutput) Steps() ApplicationStatusWorkflowStepsArrayOutput {
	return o.ApplyT(func(v *ApplicationStatusWorkflow) []ApplicationStatusWorkflowSteps {
		if v == nil {
			return nil
		}
		return v.Steps
	}).(ApplicationStatusWorkflowStepsArrayOutput)
}

func (o ApplicationStatusWorkflowPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusWorkflow) *bool {
		if v == nil {
			return nil
		}
		return &v.Suspend
	}).(pulumi.BoolPtrOutput)
}

func (o ApplicationStatusWorkflowPtrOutput) SuspendState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusWorkflow) *string {
		if v == nil {
			return nil
		}
		return v.SuspendState
	}).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusWorkflowPtrOutput) Terminated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusWorkflow) *bool {
		if v == nil {
			return nil
		}
		return &v.Terminated
	}).(pulumi.BoolPtrOutput)
}

// ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.
//
//	Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
type ApplicationStatusWorkflowContextbackend struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// ApplicationStatusWorkflowContextbackendInput is an input type that accepts ApplicationStatusWorkflowContextbackendArgs and ApplicationStatusWorkflowContextbackendOutput values.
// You can construct a concrete instance of `ApplicationStatusWorkflowContextbackendInput` via:
//
//	ApplicationStatusWorkflowContextbackendArgs{...}
type ApplicationStatusWorkflowContextbackendInput interface {
	pulumi.Input

	ToApplicationStatusWorkflowContextbackendOutput() ApplicationStatusWorkflowContextbackendOutput
	ToApplicationStatusWorkflowContextbackendOutputWithContext(context.Context) ApplicationStatusWorkflowContextbackendOutput
}

// ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.
//
//	Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
type ApplicationStatusWorkflowContextbackendArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ApplicationStatusWorkflowContextbackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusWorkflowContextbackend)(nil)).Elem()
}

func (i ApplicationStatusWorkflowContextbackendArgs) ToApplicationStatusWorkflowContextbackendOutput() ApplicationStatusWorkflowContextbackendOutput {
	return i.ToApplicationStatusWorkflowContextbackendOutputWithContext(context.Background())
}

func (i ApplicationStatusWorkflowContextbackendArgs) ToApplicationStatusWorkflowContextbackendOutputWithContext(ctx context.Context) ApplicationStatusWorkflowContextbackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusWorkflowContextbackendOutput)
}

func (i ApplicationStatusWorkflowContextbackendArgs) ToApplicationStatusWorkflowContextbackendPtrOutput() ApplicationStatusWorkflowContextbackendPtrOutput {
	return i.ToApplicationStatusWorkflowContextbackendPtrOutputWithContext(context.Background())
}

func (i ApplicationStatusWorkflowContextbackendArgs) ToApplicationStatusWorkflowContextbackendPtrOutputWithContext(ctx context.Context) ApplicationStatusWorkflowContextbackendPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusWorkflowContextbackendOutput).ToApplicationStatusWorkflowContextbackendPtrOutputWithContext(ctx)
}

// ApplicationStatusWorkflowContextbackendPtrInput is an input type that accepts ApplicationStatusWorkflowContextbackendArgs, ApplicationStatusWorkflowContextbackendPtr and ApplicationStatusWorkflowContextbackendPtrOutput values.
// You can construct a concrete instance of `ApplicationStatusWorkflowContextbackendPtrInput` via:
//
//	        ApplicationStatusWorkflowContextbackendArgs{...}
//
//	or:
//
//	        nil
type ApplicationStatusWorkflowContextbackendPtrInput interface {
	pulumi.Input

	ToApplicationStatusWorkflowContextbackendPtrOutput() ApplicationStatusWorkflowContextbackendPtrOutput
	ToApplicationStatusWorkflowContextbackendPtrOutputWithContext(context.Context) ApplicationStatusWorkflowContextbackendPtrOutput
}

type applicationStatusWorkflowContextbackendPtrType ApplicationStatusWorkflowContextbackendArgs

func ApplicationStatusWorkflowContextbackendPtr(v *ApplicationStatusWorkflowContextbackendArgs) ApplicationStatusWorkflowContextbackendPtrInput {
	return (*applicationStatusWorkflowContextbackendPtrType)(v)
}

func (*applicationStatusWorkflowContextbackendPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusWorkflowContextbackend)(nil)).Elem()
}

func (i *applicationStatusWorkflowContextbackendPtrType) ToApplicationStatusWorkflowContextbackendPtrOutput() ApplicationStatusWorkflowContextbackendPtrOutput {
	return i.ToApplicationStatusWorkflowContextbackendPtrOutputWithContext(context.Background())
}

func (i *applicationStatusWorkflowContextbackendPtrType) ToApplicationStatusWorkflowContextbackendPtrOutputWithContext(ctx context.Context) ApplicationStatusWorkflowContextbackendPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusWorkflowContextbackendPtrOutput)
}

// ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.
//
//	Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
type ApplicationStatusWorkflowContextbackendOutput struct{ *pulumi.OutputState }

func (ApplicationStatusWorkflowContextbackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusWorkflowContextbackend)(nil)).Elem()
}

func (o ApplicationStatusWorkflowContextbackendOutput) ToApplicationStatusWorkflowContextbackendOutput() ApplicationStatusWorkflowContextbackendOutput {
	return o
}

func (o ApplicationStatusWorkflowContextbackendOutput) ToApplicationStatusWorkflowContextbackendOutputWithContext(ctx context.Context) ApplicationStatusWorkflowContextbackendOutput {
	return o
}

func (o ApplicationStatusWorkflowContextbackendOutput) ToApplicationStatusWorkflowContextbackendPtrOutput() ApplicationStatusWorkflowContextbackendPtrOutput {
	return o.ToApplicationStatusWorkflowContextbackendPtrOutputWithContext(context.Background())
}

func (o ApplicationStatusWorkflowContextbackendOutput) ToApplicationStatusWorkflowContextbackendPtrOutputWithContext(ctx context.Context) ApplicationStatusWorkflowContextbackendPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationStatusWorkflowContextbackend) *ApplicationStatusWorkflowContextbackend {
		return &v
	}).(ApplicationStatusWorkflowContextbackendPtrOutput)
}

// API version of the referent.
func (o ApplicationStatusWorkflowContextbackendOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflowContextbackend) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o ApplicationStatusWorkflowContextbackendOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflowContextbackend) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ApplicationStatusWorkflowContextbackendOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflowContextbackend) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ApplicationStatusWorkflowContextbackendOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflowContextbackend) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o ApplicationStatusWorkflowContextbackendOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflowContextbackend) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ApplicationStatusWorkflowContextbackendOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflowContextbackend) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o ApplicationStatusWorkflowContextbackendOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflowContextbackend) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ApplicationStatusWorkflowContextbackendPtrOutput struct{ *pulumi.OutputState }

func (ApplicationStatusWorkflowContextbackendPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationStatusWorkflowContextbackend)(nil)).Elem()
}

func (o ApplicationStatusWorkflowContextbackendPtrOutput) ToApplicationStatusWorkflowContextbackendPtrOutput() ApplicationStatusWorkflowContextbackendPtrOutput {
	return o
}

func (o ApplicationStatusWorkflowContextbackendPtrOutput) ToApplicationStatusWorkflowContextbackendPtrOutputWithContext(ctx context.Context) ApplicationStatusWorkflowContextbackendPtrOutput {
	return o
}

func (o ApplicationStatusWorkflowContextbackendPtrOutput) Elem() ApplicationStatusWorkflowContextbackendOutput {
	return o.ApplyT(func(v *ApplicationStatusWorkflowContextbackend) ApplicationStatusWorkflowContextbackend {
		if v != nil {
			return *v
		}
		var ret ApplicationStatusWorkflowContextbackend
		return ret
	}).(ApplicationStatusWorkflowContextbackendOutput)
}

// API version of the referent.
func (o ApplicationStatusWorkflowContextbackendPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusWorkflowContextbackend) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o ApplicationStatusWorkflowContextbackendPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusWorkflowContextbackend) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ApplicationStatusWorkflowContextbackendPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusWorkflowContextbackend) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ApplicationStatusWorkflowContextbackendPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusWorkflowContextbackend) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o ApplicationStatusWorkflowContextbackendPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusWorkflowContextbackend) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ApplicationStatusWorkflowContextbackendPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusWorkflowContextbackend) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o ApplicationStatusWorkflowContextbackendPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationStatusWorkflowContextbackend) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// WorkflowStepStatus record the status of a workflow step, include step status and subStep status
type ApplicationStatusWorkflowSteps struct {
	// FirstExecuteTime is the first time this step execution.
	FirstExecuteTime *string `pulumi:"firstExecuteTime"`
	Id               string  `pulumi:"id"`
	// LastExecuteTime is the last time this step execution.
	LastExecuteTime *string `pulumi:"lastExecuteTime"`
	// A human readable message indicating details about why the workflowStep is in this state.
	Message *string `pulumi:"message"`
	Name    *string `pulumi:"name"`
	// WorkflowStepPhase describes the phase of a workflow step.
	Phase *string `pulumi:"phase"`
	// A brief CamelCase message indicating details about why the workflowStep is in this state.
	Reason   *string                                  `pulumi:"reason"`
	SubSteps []ApplicationStatusWorkflowStepsSubsteps `pulumi:"subSteps"`
	Type     *string                                  `pulumi:"type"`
}

// ApplicationStatusWorkflowStepsInput is an input type that accepts ApplicationStatusWorkflowStepsArgs and ApplicationStatusWorkflowStepsOutput values.
// You can construct a concrete instance of `ApplicationStatusWorkflowStepsInput` via:
//
//	ApplicationStatusWorkflowStepsArgs{...}
type ApplicationStatusWorkflowStepsInput interface {
	pulumi.Input

	ToApplicationStatusWorkflowStepsOutput() ApplicationStatusWorkflowStepsOutput
	ToApplicationStatusWorkflowStepsOutputWithContext(context.Context) ApplicationStatusWorkflowStepsOutput
}

// WorkflowStepStatus record the status of a workflow step, include step status and subStep status
type ApplicationStatusWorkflowStepsArgs struct {
	// FirstExecuteTime is the first time this step execution.
	FirstExecuteTime pulumi.StringPtrInput `pulumi:"firstExecuteTime"`
	Id               pulumi.StringInput    `pulumi:"id"`
	// LastExecuteTime is the last time this step execution.
	LastExecuteTime pulumi.StringPtrInput `pulumi:"lastExecuteTime"`
	// A human readable message indicating details about why the workflowStep is in this state.
	Message pulumi.StringPtrInput `pulumi:"message"`
	Name    pulumi.StringPtrInput `pulumi:"name"`
	// WorkflowStepPhase describes the phase of a workflow step.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
	// A brief CamelCase message indicating details about why the workflowStep is in this state.
	Reason   pulumi.StringPtrInput                            `pulumi:"reason"`
	SubSteps ApplicationStatusWorkflowStepsSubstepsArrayInput `pulumi:"subSteps"`
	Type     pulumi.StringPtrInput                            `pulumi:"type"`
}

func (ApplicationStatusWorkflowStepsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusWorkflowSteps)(nil)).Elem()
}

func (i ApplicationStatusWorkflowStepsArgs) ToApplicationStatusWorkflowStepsOutput() ApplicationStatusWorkflowStepsOutput {
	return i.ToApplicationStatusWorkflowStepsOutputWithContext(context.Background())
}

func (i ApplicationStatusWorkflowStepsArgs) ToApplicationStatusWorkflowStepsOutputWithContext(ctx context.Context) ApplicationStatusWorkflowStepsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusWorkflowStepsOutput)
}

// ApplicationStatusWorkflowStepsArrayInput is an input type that accepts ApplicationStatusWorkflowStepsArray and ApplicationStatusWorkflowStepsArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusWorkflowStepsArrayInput` via:
//
//	ApplicationStatusWorkflowStepsArray{ ApplicationStatusWorkflowStepsArgs{...} }
type ApplicationStatusWorkflowStepsArrayInput interface {
	pulumi.Input

	ToApplicationStatusWorkflowStepsArrayOutput() ApplicationStatusWorkflowStepsArrayOutput
	ToApplicationStatusWorkflowStepsArrayOutputWithContext(context.Context) ApplicationStatusWorkflowStepsArrayOutput
}

type ApplicationStatusWorkflowStepsArray []ApplicationStatusWorkflowStepsInput

func (ApplicationStatusWorkflowStepsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusWorkflowSteps)(nil)).Elem()
}

func (i ApplicationStatusWorkflowStepsArray) ToApplicationStatusWorkflowStepsArrayOutput() ApplicationStatusWorkflowStepsArrayOutput {
	return i.ToApplicationStatusWorkflowStepsArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusWorkflowStepsArray) ToApplicationStatusWorkflowStepsArrayOutputWithContext(ctx context.Context) ApplicationStatusWorkflowStepsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusWorkflowStepsArrayOutput)
}

// WorkflowStepStatus record the status of a workflow step, include step status and subStep status
type ApplicationStatusWorkflowStepsOutput struct{ *pulumi.OutputState }

func (ApplicationStatusWorkflowStepsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusWorkflowSteps)(nil)).Elem()
}

func (o ApplicationStatusWorkflowStepsOutput) ToApplicationStatusWorkflowStepsOutput() ApplicationStatusWorkflowStepsOutput {
	return o
}

func (o ApplicationStatusWorkflowStepsOutput) ToApplicationStatusWorkflowStepsOutputWithContext(ctx context.Context) ApplicationStatusWorkflowStepsOutput {
	return o
}

// FirstExecuteTime is the first time this step execution.
func (o ApplicationStatusWorkflowStepsOutput) FirstExecuteTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflowSteps) *string { return v.FirstExecuteTime }).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusWorkflowStepsOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflowSteps) string { return v.Id }).(pulumi.StringOutput)
}

// LastExecuteTime is the last time this step execution.
func (o ApplicationStatusWorkflowStepsOutput) LastExecuteTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflowSteps) *string { return v.LastExecuteTime }).(pulumi.StringPtrOutput)
}

// A human readable message indicating details about why the workflowStep is in this state.
func (o ApplicationStatusWorkflowStepsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflowSteps) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusWorkflowStepsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflowSteps) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// WorkflowStepPhase describes the phase of a workflow step.
func (o ApplicationStatusWorkflowStepsOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflowSteps) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

// A brief CamelCase message indicating details about why the workflowStep is in this state.
func (o ApplicationStatusWorkflowStepsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflowSteps) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusWorkflowStepsOutput) SubSteps() ApplicationStatusWorkflowStepsSubstepsArrayOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflowSteps) []ApplicationStatusWorkflowStepsSubsteps { return v.SubSteps }).(ApplicationStatusWorkflowStepsSubstepsArrayOutput)
}

func (o ApplicationStatusWorkflowStepsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflowSteps) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ApplicationStatusWorkflowStepsArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusWorkflowStepsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusWorkflowSteps)(nil)).Elem()
}

func (o ApplicationStatusWorkflowStepsArrayOutput) ToApplicationStatusWorkflowStepsArrayOutput() ApplicationStatusWorkflowStepsArrayOutput {
	return o
}

func (o ApplicationStatusWorkflowStepsArrayOutput) ToApplicationStatusWorkflowStepsArrayOutputWithContext(ctx context.Context) ApplicationStatusWorkflowStepsArrayOutput {
	return o
}

func (o ApplicationStatusWorkflowStepsArrayOutput) Index(i pulumi.IntInput) ApplicationStatusWorkflowStepsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusWorkflowSteps {
		return vs[0].([]ApplicationStatusWorkflowSteps)[vs[1].(int)]
	}).(ApplicationStatusWorkflowStepsOutput)
}

// StepStatus record the base status of workflow step, which could be workflow step or subStep
type ApplicationStatusWorkflowStepsSubsteps struct {
	// FirstExecuteTime is the first time this step execution.
	FirstExecuteTime *string `pulumi:"firstExecuteTime"`
	Id               string  `pulumi:"id"`
	// LastExecuteTime is the last time this step execution.
	LastExecuteTime *string `pulumi:"lastExecuteTime"`
	// A human readable message indicating details about why the workflowStep is in this state.
	Message *string `pulumi:"message"`
	Name    *string `pulumi:"name"`
	// WorkflowStepPhase describes the phase of a workflow step.
	Phase *string `pulumi:"phase"`
	// A brief CamelCase message indicating details about why the workflowStep is in this state.
	Reason *string `pulumi:"reason"`
	Type   *string `pulumi:"type"`
}

// ApplicationStatusWorkflowStepsSubstepsInput is an input type that accepts ApplicationStatusWorkflowStepsSubstepsArgs and ApplicationStatusWorkflowStepsSubstepsOutput values.
// You can construct a concrete instance of `ApplicationStatusWorkflowStepsSubstepsInput` via:
//
//	ApplicationStatusWorkflowStepsSubstepsArgs{...}
type ApplicationStatusWorkflowStepsSubstepsInput interface {
	pulumi.Input

	ToApplicationStatusWorkflowStepsSubstepsOutput() ApplicationStatusWorkflowStepsSubstepsOutput
	ToApplicationStatusWorkflowStepsSubstepsOutputWithContext(context.Context) ApplicationStatusWorkflowStepsSubstepsOutput
}

// StepStatus record the base status of workflow step, which could be workflow step or subStep
type ApplicationStatusWorkflowStepsSubstepsArgs struct {
	// FirstExecuteTime is the first time this step execution.
	FirstExecuteTime pulumi.StringPtrInput `pulumi:"firstExecuteTime"`
	Id               pulumi.StringInput    `pulumi:"id"`
	// LastExecuteTime is the last time this step execution.
	LastExecuteTime pulumi.StringPtrInput `pulumi:"lastExecuteTime"`
	// A human readable message indicating details about why the workflowStep is in this state.
	Message pulumi.StringPtrInput `pulumi:"message"`
	Name    pulumi.StringPtrInput `pulumi:"name"`
	// WorkflowStepPhase describes the phase of a workflow step.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
	// A brief CamelCase message indicating details about why the workflowStep is in this state.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	Type   pulumi.StringPtrInput `pulumi:"type"`
}

func (ApplicationStatusWorkflowStepsSubstepsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusWorkflowStepsSubsteps)(nil)).Elem()
}

func (i ApplicationStatusWorkflowStepsSubstepsArgs) ToApplicationStatusWorkflowStepsSubstepsOutput() ApplicationStatusWorkflowStepsSubstepsOutput {
	return i.ToApplicationStatusWorkflowStepsSubstepsOutputWithContext(context.Background())
}

func (i ApplicationStatusWorkflowStepsSubstepsArgs) ToApplicationStatusWorkflowStepsSubstepsOutputWithContext(ctx context.Context) ApplicationStatusWorkflowStepsSubstepsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusWorkflowStepsSubstepsOutput)
}

// ApplicationStatusWorkflowStepsSubstepsArrayInput is an input type that accepts ApplicationStatusWorkflowStepsSubstepsArray and ApplicationStatusWorkflowStepsSubstepsArrayOutput values.
// You can construct a concrete instance of `ApplicationStatusWorkflowStepsSubstepsArrayInput` via:
//
//	ApplicationStatusWorkflowStepsSubstepsArray{ ApplicationStatusWorkflowStepsSubstepsArgs{...} }
type ApplicationStatusWorkflowStepsSubstepsArrayInput interface {
	pulumi.Input

	ToApplicationStatusWorkflowStepsSubstepsArrayOutput() ApplicationStatusWorkflowStepsSubstepsArrayOutput
	ToApplicationStatusWorkflowStepsSubstepsArrayOutputWithContext(context.Context) ApplicationStatusWorkflowStepsSubstepsArrayOutput
}

type ApplicationStatusWorkflowStepsSubstepsArray []ApplicationStatusWorkflowStepsSubstepsInput

func (ApplicationStatusWorkflowStepsSubstepsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusWorkflowStepsSubsteps)(nil)).Elem()
}

func (i ApplicationStatusWorkflowStepsSubstepsArray) ToApplicationStatusWorkflowStepsSubstepsArrayOutput() ApplicationStatusWorkflowStepsSubstepsArrayOutput {
	return i.ToApplicationStatusWorkflowStepsSubstepsArrayOutputWithContext(context.Background())
}

func (i ApplicationStatusWorkflowStepsSubstepsArray) ToApplicationStatusWorkflowStepsSubstepsArrayOutputWithContext(ctx context.Context) ApplicationStatusWorkflowStepsSubstepsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationStatusWorkflowStepsSubstepsArrayOutput)
}

// StepStatus record the base status of workflow step, which could be workflow step or subStep
type ApplicationStatusWorkflowStepsSubstepsOutput struct{ *pulumi.OutputState }

func (ApplicationStatusWorkflowStepsSubstepsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationStatusWorkflowStepsSubsteps)(nil)).Elem()
}

func (o ApplicationStatusWorkflowStepsSubstepsOutput) ToApplicationStatusWorkflowStepsSubstepsOutput() ApplicationStatusWorkflowStepsSubstepsOutput {
	return o
}

func (o ApplicationStatusWorkflowStepsSubstepsOutput) ToApplicationStatusWorkflowStepsSubstepsOutputWithContext(ctx context.Context) ApplicationStatusWorkflowStepsSubstepsOutput {
	return o
}

// FirstExecuteTime is the first time this step execution.
func (o ApplicationStatusWorkflowStepsSubstepsOutput) FirstExecuteTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflowStepsSubsteps) *string { return v.FirstExecuteTime }).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusWorkflowStepsSubstepsOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflowStepsSubsteps) string { return v.Id }).(pulumi.StringOutput)
}

// LastExecuteTime is the last time this step execution.
func (o ApplicationStatusWorkflowStepsSubstepsOutput) LastExecuteTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflowStepsSubsteps) *string { return v.LastExecuteTime }).(pulumi.StringPtrOutput)
}

// A human readable message indicating details about why the workflowStep is in this state.
func (o ApplicationStatusWorkflowStepsSubstepsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflowStepsSubsteps) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusWorkflowStepsSubstepsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflowStepsSubsteps) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// WorkflowStepPhase describes the phase of a workflow step.
func (o ApplicationStatusWorkflowStepsSubstepsOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflowStepsSubsteps) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

// A brief CamelCase message indicating details about why the workflowStep is in this state.
func (o ApplicationStatusWorkflowStepsSubstepsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflowStepsSubsteps) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

func (o ApplicationStatusWorkflowStepsSubstepsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationStatusWorkflowStepsSubsteps) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ApplicationStatusWorkflowStepsSubstepsArrayOutput struct{ *pulumi.OutputState }

func (ApplicationStatusWorkflowStepsSubstepsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationStatusWorkflowStepsSubsteps)(nil)).Elem()
}

func (o ApplicationStatusWorkflowStepsSubstepsArrayOutput) ToApplicationStatusWorkflowStepsSubstepsArrayOutput() ApplicationStatusWorkflowStepsSubstepsArrayOutput {
	return o
}

func (o ApplicationStatusWorkflowStepsSubstepsArrayOutput) ToApplicationStatusWorkflowStepsSubstepsArrayOutputWithContext(ctx context.Context) ApplicationStatusWorkflowStepsSubstepsArrayOutput {
	return o
}

func (o ApplicationStatusWorkflowStepsSubstepsArrayOutput) Index(i pulumi.IntInput) ApplicationStatusWorkflowStepsSubstepsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationStatusWorkflowStepsSubsteps {
		return vs[0].([]ApplicationStatusWorkflowStepsSubsteps)[vs[1].(int)]
	}).(ApplicationStatusWorkflowStepsSubstepsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSpecInput)(nil)).Elem(), ApplicationSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSpecPtrInput)(nil)).Elem(), ApplicationSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSpecComponentsInput)(nil)).Elem(), ApplicationSpecComponentsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSpecComponentsArrayInput)(nil)).Elem(), ApplicationSpecComponentsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSpecComponentsInputsInput)(nil)).Elem(), ApplicationSpecComponentsInputsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSpecComponentsInputsArrayInput)(nil)).Elem(), ApplicationSpecComponentsInputsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSpecComponentsOutputsInput)(nil)).Elem(), ApplicationSpecComponentsOutputsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSpecComponentsOutputsArrayInput)(nil)).Elem(), ApplicationSpecComponentsOutputsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSpecComponentsTraitsInput)(nil)).Elem(), ApplicationSpecComponentsTraitsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSpecComponentsTraitsArrayInput)(nil)).Elem(), ApplicationSpecComponentsTraitsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSpecPoliciesInput)(nil)).Elem(), ApplicationSpecPoliciesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSpecPoliciesArrayInput)(nil)).Elem(), ApplicationSpecPoliciesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSpecWorkflowInput)(nil)).Elem(), ApplicationSpecWorkflowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSpecWorkflowPtrInput)(nil)).Elem(), ApplicationSpecWorkflowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSpecWorkflowModeInput)(nil)).Elem(), ApplicationSpecWorkflowModeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSpecWorkflowModePtrInput)(nil)).Elem(), ApplicationSpecWorkflowModeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSpecWorkflowStepsInput)(nil)).Elem(), ApplicationSpecWorkflowStepsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSpecWorkflowStepsArrayInput)(nil)).Elem(), ApplicationSpecWorkflowStepsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSpecWorkflowStepsInputsInput)(nil)).Elem(), ApplicationSpecWorkflowStepsInputsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSpecWorkflowStepsInputsArrayInput)(nil)).Elem(), ApplicationSpecWorkflowStepsInputsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSpecWorkflowStepsMetaInput)(nil)).Elem(), ApplicationSpecWorkflowStepsMetaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSpecWorkflowStepsMetaPtrInput)(nil)).Elem(), ApplicationSpecWorkflowStepsMetaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSpecWorkflowStepsOutputsInput)(nil)).Elem(), ApplicationSpecWorkflowStepsOutputsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSpecWorkflowStepsOutputsArrayInput)(nil)).Elem(), ApplicationSpecWorkflowStepsOutputsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSpecWorkflowStepsSubstepsInput)(nil)).Elem(), ApplicationSpecWorkflowStepsSubstepsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSpecWorkflowStepsSubstepsArrayInput)(nil)).Elem(), ApplicationSpecWorkflowStepsSubstepsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSpecWorkflowStepsSubstepsInputsInput)(nil)).Elem(), ApplicationSpecWorkflowStepsSubstepsInputsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSpecWorkflowStepsSubstepsInputsArrayInput)(nil)).Elem(), ApplicationSpecWorkflowStepsSubstepsInputsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSpecWorkflowStepsSubstepsMetaInput)(nil)).Elem(), ApplicationSpecWorkflowStepsSubstepsMetaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSpecWorkflowStepsSubstepsMetaPtrInput)(nil)).Elem(), ApplicationSpecWorkflowStepsSubstepsMetaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSpecWorkflowStepsSubstepsOutputsInput)(nil)).Elem(), ApplicationSpecWorkflowStepsSubstepsOutputsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSpecWorkflowStepsSubstepsOutputsArrayInput)(nil)).Elem(), ApplicationSpecWorkflowStepsSubstepsOutputsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationStatusInput)(nil)).Elem(), ApplicationStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationStatusPtrInput)(nil)).Elem(), ApplicationStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationStatusAppliedresourcesInput)(nil)).Elem(), ApplicationStatusAppliedresourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationStatusAppliedresourcesArrayInput)(nil)).Elem(), ApplicationStatusAppliedresourcesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationStatusComponentsInput)(nil)).Elem(), ApplicationStatusComponentsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationStatusComponentsArrayInput)(nil)).Elem(), ApplicationStatusComponentsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationStatusConditionsInput)(nil)).Elem(), ApplicationStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationStatusConditionsArrayInput)(nil)).Elem(), ApplicationStatusConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationStatusLatestrevisionInput)(nil)).Elem(), ApplicationStatusLatestrevisionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationStatusLatestrevisionPtrInput)(nil)).Elem(), ApplicationStatusLatestrevisionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationStatusPolicyInput)(nil)).Elem(), ApplicationStatusPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationStatusPolicyArrayInput)(nil)).Elem(), ApplicationStatusPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationStatusServicesInput)(nil)).Elem(), ApplicationStatusServicesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationStatusServicesArrayInput)(nil)).Elem(), ApplicationStatusServicesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationStatusServicesScopesInput)(nil)).Elem(), ApplicationStatusServicesScopesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationStatusServicesScopesArrayInput)(nil)).Elem(), ApplicationStatusServicesScopesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationStatusServicesTraitsInput)(nil)).Elem(), ApplicationStatusServicesTraitsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationStatusServicesTraitsArrayInput)(nil)).Elem(), ApplicationStatusServicesTraitsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationStatusServicesWorkloaddefinitionInput)(nil)).Elem(), ApplicationStatusServicesWorkloaddefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationStatusServicesWorkloaddefinitionPtrInput)(nil)).Elem(), ApplicationStatusServicesWorkloaddefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationStatusWorkflowInput)(nil)).Elem(), ApplicationStatusWorkflowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationStatusWorkflowPtrInput)(nil)).Elem(), ApplicationStatusWorkflowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationStatusWorkflowContextbackendInput)(nil)).Elem(), ApplicationStatusWorkflowContextbackendArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationStatusWorkflowContextbackendPtrInput)(nil)).Elem(), ApplicationStatusWorkflowContextbackendArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationStatusWorkflowStepsInput)(nil)).Elem(), ApplicationStatusWorkflowStepsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationStatusWorkflowStepsArrayInput)(nil)).Elem(), ApplicationStatusWorkflowStepsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationStatusWorkflowStepsSubstepsInput)(nil)).Elem(), ApplicationStatusWorkflowStepsSubstepsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationStatusWorkflowStepsSubstepsArrayInput)(nil)).Elem(), ApplicationStatusWorkflowStepsSubstepsArray{})
	pulumi.RegisterOutputType(ApplicationSpecOutput{})
	pulumi.RegisterOutputType(ApplicationSpecPtrOutput{})
	pulumi.RegisterOutputType(ApplicationSpecComponentsOutput{})
	pulumi.RegisterOutputType(ApplicationSpecComponentsArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSpecComponentsInputsOutput{})
	pulumi.RegisterOutputType(ApplicationSpecComponentsInputsArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSpecComponentsOutputsOutput{})
	pulumi.RegisterOutputType(ApplicationSpecComponentsOutputsArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSpecComponentsTraitsOutput{})
	pulumi.RegisterOutputType(ApplicationSpecComponentsTraitsArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSpecPoliciesOutput{})
	pulumi.RegisterOutputType(ApplicationSpecPoliciesArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSpecWorkflowOutput{})
	pulumi.RegisterOutputType(ApplicationSpecWorkflowPtrOutput{})
	pulumi.RegisterOutputType(ApplicationSpecWorkflowModeOutput{})
	pulumi.RegisterOutputType(ApplicationSpecWorkflowModePtrOutput{})
	pulumi.RegisterOutputType(ApplicationSpecWorkflowStepsOutput{})
	pulumi.RegisterOutputType(ApplicationSpecWorkflowStepsArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSpecWorkflowStepsInputsOutput{})
	pulumi.RegisterOutputType(ApplicationSpecWorkflowStepsInputsArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSpecWorkflowStepsMetaOutput{})
	pulumi.RegisterOutputType(ApplicationSpecWorkflowStepsMetaPtrOutput{})
	pulumi.RegisterOutputType(ApplicationSpecWorkflowStepsOutputsOutput{})
	pulumi.RegisterOutputType(ApplicationSpecWorkflowStepsOutputsArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSpecWorkflowStepsSubstepsOutput{})
	pulumi.RegisterOutputType(ApplicationSpecWorkflowStepsSubstepsArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSpecWorkflowStepsSubstepsInputsOutput{})
	pulumi.RegisterOutputType(ApplicationSpecWorkflowStepsSubstepsInputsArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSpecWorkflowStepsSubstepsMetaOutput{})
	pulumi.RegisterOutputType(ApplicationSpecWorkflowStepsSubstepsMetaPtrOutput{})
	pulumi.RegisterOutputType(ApplicationSpecWorkflowStepsSubstepsOutputsOutput{})
	pulumi.RegisterOutputType(ApplicationSpecWorkflowStepsSubstepsOutputsArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusOutput{})
	pulumi.RegisterOutputType(ApplicationStatusPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusAppliedresourcesOutput{})
	pulumi.RegisterOutputType(ApplicationStatusAppliedresourcesArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusComponentsOutput{})
	pulumi.RegisterOutputType(ApplicationStatusComponentsArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusConditionsOutput{})
	pulumi.RegisterOutputType(ApplicationStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusLatestrevisionOutput{})
	pulumi.RegisterOutputType(ApplicationStatusLatestrevisionPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusPolicyOutput{})
	pulumi.RegisterOutputType(ApplicationStatusPolicyArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusServicesOutput{})
	pulumi.RegisterOutputType(ApplicationStatusServicesArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusServicesScopesOutput{})
	pulumi.RegisterOutputType(ApplicationStatusServicesScopesArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusServicesTraitsOutput{})
	pulumi.RegisterOutputType(ApplicationStatusServicesTraitsArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusServicesWorkloaddefinitionOutput{})
	pulumi.RegisterOutputType(ApplicationStatusServicesWorkloaddefinitionPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusWorkflowOutput{})
	pulumi.RegisterOutputType(ApplicationStatusWorkflowPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusWorkflowContextbackendOutput{})
	pulumi.RegisterOutputType(ApplicationStatusWorkflowContextbackendPtrOutput{})
	pulumi.RegisterOutputType(ApplicationStatusWorkflowStepsOutput{})
	pulumi.RegisterOutputType(ApplicationStatusWorkflowStepsArrayOutput{})
	pulumi.RegisterOutputType(ApplicationStatusWorkflowStepsSubstepsOutput{})
	pulumi.RegisterOutputType(ApplicationStatusWorkflowStepsSubstepsArrayOutput{})
}
